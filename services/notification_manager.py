import asyncio
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
import logging

logger = logging.getLogger(__name__)

class NotificationManager:
    def __init__(self, bot: Bot, db_manager):
        self.bot = bot
        self.db = db_manager
        self.notification_queue = asyncio.Queue()
        self.notification_levels = {
            'info': 'üìù',
            'warning': '‚ö†Ô∏è',
            'critical': 'üö®',
            'success': '‚úÖ'
        }

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        asyncio.create_task(self._process_queue())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        pass

    async def _process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while True:
            try:
                notification = await self.notification_queue.get()
                await self._send_notification(notification)
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.error(f"Error processing notification: {e}")

    async def _send_notification(self, notification: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            emoji = self.notification_levels.get(notification['level'], 'üìù')
            message = f"{emoji} {notification['message']}"
            
            keyboard = None
            if notification.get('buttons'):
                keyboard = InlineKeyboardMarkup(notification['buttons'])
            
            await self.bot.send_message(
                chat_id=notification['user_id'],
                text=message,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.create_notification(
                user_id=notification['user_id'],
                message=notification['message'],
                level=notification['level'],
                created_at=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"Error sending notification: {e}")

    async def notify_user(self, user_id: int, message: str, 
                         level: str = 'info',
                         buttons: List[List[InlineKeyboardButton]] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        await self.notification_queue.put({
            'user_id': user_id,
            'message': message,
            'level': level,
            'buttons': buttons
        })

    async def notify_group(self, group_id: int, message: str,
                          level: str = 'info',
                          exclude_user_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã"""
        try:
            users = await self.db.get_group_users(group_id)
            for user in users:
                if user['user_id'] != exclude_user_id:
                    await self.notify_user(user['user_id'], message, level)
        except Exception as e:
            logger.error(f"Error sending group notification: {e}")

    async def notify_coordinators(self, message: str, level: str = 'info'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º"""
        try:
            coordinators = await self.db.get_coordinators()
            for coord in coordinators:
                await self.notify_user(coord['user_id'], message, level)
        except Exception as e:
            logger.error(f"Error sending coordinator notification: {e}")