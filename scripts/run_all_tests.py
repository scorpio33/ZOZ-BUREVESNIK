import unittest
import sys
import os
import coverage
import logging
import json
from datetime import datetime
from pathlib import Path
import asyncio
import pytest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('TestRunner')

class TestReportManager:
    def __init__(self, root_dir: Path):
        self.root_dir = root_dir
        self.report_info_file = root_dir / 'test_report_location.json'
        self.coverage_dir = root_dir / 'coverage_report'
        
    def save_report_location(self, coverage_percentage: float):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"""
        report_info = {
            'report_path': str(self.coverage_dir.absolute()),
            'timestamp': datetime.now().isoformat(),
            'coverage_percentage': coverage_percentage,
            'last_run': {
                'date': datetime.now().strftime('%Y-%m-%d'),
                'time': datetime.now().strftime('%H:%M:%S')
            }
        }
        
        with open(self.report_info_file, 'w', encoding='utf-8') as f:
            json.dump(report_info, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—É—Ç–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        with open(self.root_dir / 'coverage_report_path.txt', 'w', encoding='utf-8') as f:
            f.write(f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤: {self.coverage_dir.absolute()}\n")
            f.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞: {coverage_percentage:.1f}%\n")
            f.write(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {report_info['last_run']['date']} {report_info['last_run']['time']}")

class AsyncTestRunner:
    def __init__(self):
        self.results = []
        self.failures = []
        self.errors = []
        self.tests_run = 0

    async def run_test(self, test):
        try:
            if hasattr(test, 'asyncSetUp'):
                await test.asyncSetUp()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            test_methods = [method for method in dir(test) if method.startswith('test_')]
            
            for method_name in test_methods:
                method = getattr(test, method_name)
                if asyncio.iscoroutinefunction(method):
                    try:
                        await method()
                        self.tests_run += 1
                    except AssertionError as e:
                        self.failures.append((f"{test.__class__.__name__}.{method_name}", str(e)))
                    except Exception as e:
                        self.errors.append((f"{test.__class__.__name__}.{method_name}", str(e)))
                else:
                    try:
                        method()
                        self.tests_run += 1
                    except AssertionError as e:
                        self.failures.append((f"{test.__class__.__name__}.{method_name}", str(e)))
                    except Exception as e:
                        self.errors.append((f"{test.__class__.__name__}.{method_name}", str(e)))

            if hasattr(test, 'asyncTearDown'):
                await test.asyncTearDown()
                
        except Exception as e:
            self.errors.append((test.__class__.__name__, str(e)))

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
    root_dir = Path(__file__).parent.parent
    sys.path.append(str(root_dir))
    
    report_manager = TestReportManager(root_dir)
    
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è coverage
    cov = coverage.Coverage(
        branch=True,
        source=[str(root_dir / 'handlers'),
                str(root_dir / 'core'),
                str(root_dir / 'services')],
        omit=['*/__init__.py', '*/tests/*', '*/venv/*']
    )
    
    try:
        # –ó–∞–ø—É—Å–∫ coverage
        cov.start()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
        loader = unittest.TestLoader()
        start_dir = str(Path(__file__).parent.parent / 'tests')
        suite = loader.discover(start_dir, pattern='test_*.py')
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π runner
        async_runner = AsyncTestRunner()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async def run_suite():
            for test_case in suite:
                if isinstance(test_case, unittest.TestSuite):
                    for test in test_case:
                        await async_runner.run_test(test)
                else:
                    await async_runner.run_test(test_case)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        asyncio.run(run_suite())
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º coverage
        cov.stop()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤
        logger.info("\n=== üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
        successful_tests = async_runner.tests_run - len(async_runner.failures) - len(async_runner.errors)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {len(async_runner.failures)}")
        logger.info(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–π: {len(async_runner.errors)}")
        
        try:
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
            logger.info("\n=== üìà –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ ===")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            report_manager.coverage_dir.mkdir(exist_ok=True)
            percentage = cov.report(file=open(report_manager.coverage_dir / 'coverage.txt', 'w'))
            
            logger.info(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {percentage:.1f}%")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            cov.html_report(directory=str(report_manager.coverage_dir))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
            report_manager.save_report_location(percentage)
            
            logger.info(f"\n–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤: {report_manager.coverage_dir.absolute()}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            create_detailed_report(
                report_manager.coverage_dir,
                {
                    'total_tests': async_runner.tests_run,
                    'successful_tests': successful_tests,
                    'failures': len(async_runner.failures),
                    'errors': len(async_runner.errors),
                    'coverage_percentage': percentage,
                    'failures_details': [f"{name}: {error}" for name, error in async_runner.failures],
                    'errors_details': [f"{name}: {error}" for name, error in async_runner.errors]
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞: {e}")
            logger.exception(e)
        
        if async_runner.failures or async_runner.errors:
            logger.error("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ:")
            for name, error in async_runner.failures:
                logger.error(f"- Failure in {name}: {error}")
            for name, error in async_runner.errors:
                logger.error(f"- Error in {name}: {error}")
            return 1
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        return 1

def create_detailed_report(report_dir: Path, data: dict):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    report_path = report_dir / 'detailed_test_report.html'
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            .container {{ max-width: 800px; margin: 0 auto; }}
            .status {{ padding: 10px; margin: 10px 0; border-radius: 5px; }}
            .success {{ background-color: #dff0d8; }}
            .warning {{ background-color: #fcf8e3; }}
            .error {{ background-color: #f2dede; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</h1>
            <div class="status success">
                <h2>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                <p>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {data['total_tests']}</p>
                <p>–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {data['successful_tests']}</p>
                <p>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞: {data['coverage_percentage']:.1f}%</p>
            </div>
            
            <div class="status warning">
                <h2>–û—à–∏–±–∫–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è</h2>
                <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {data['failures']}</p>
                <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {data['errors']}</p>
            </div>
    """
    
    if data['failures_details'] or data['errors_details']:
        html_content += """
            <div class="status error">
                <h2>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫</h2>
        """
        if data['failures_details']:
            html_content += "<h3>–û—à–∏–±–∫–∏:</h3><ul>"
            for failure in data['failures_details']:
                html_content += f"<li>{failure}</li>"
            html_content += "</ul>"
            
        if data['errors_details']:
            html_content += "<h3>–ò—Å–∫–ª—é—á–µ–Ω–∏—è:</h3><ul>"
            for error in data['errors_details']:
                html_content += f"<li>{error}</li>"
            html_content += "</ul>"
        html_content += "</div>"
    
    html_content += """
        </div>
    </body>
    </html>
    """
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(html_content)

if __name__ == '__main__':
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    sys.exit(run_all_tests())
