from typing import List, Dict, Optional
from datetime import datetime
import logging
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

class CommunicationManager:
    def __init__(self, bot: Bot, db_manager, notification_manager):
        self.bot = bot
        self.db = db_manager
        self.notification = notification_manager

    async def create_group_chat(self, group_id: int, name: str, chat_type: str = 'general') -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            chat_id = await self.db.execute_query_fetchone("""
                INSERT INTO group_chats (group_id, name, type)
                VALUES (?, ?, ?)
                RETURNING chat_id
            """, (group_id, name, chat_type))
            
            if chat_type == 'emergency':
                await self.notify_group_members(group_id, 
                    "üö® –°–æ–∑–¥–∞–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏!\n"
                    "–í—Å–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å.")
            
            return chat_id
        except Exception as e:
            logger.error(f"Error creating group chat: {e}")
            return None

    async def send_message(self, chat_id: int, sender_id: int, content: str, 
                          message_type: str = 'text') -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            message_id = await self.db.execute_query_fetchone("""
                INSERT INTO messages (chat_id, sender_id, message_type, content)
                VALUES (?, ?, ?, ?)
                RETURNING message_id
            """, (chat_id, sender_id, message_type, content))

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await self.db.execute_query_fetchone("""
                SELECT gc.*, sg.name as group_name 
                FROM group_chats gc
                JOIN search_groups sg ON gc.group_id = sg.group_id
                WHERE gc.chat_id = ?
            """, (chat_id,))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sender_info = await self.db.get_user(sender_id)
            formatted_message = (
                f"üë§ {sender_info['full_name']}\n"
                f"üìù {content}\n"
                f"üïí {datetime.now().strftime('%H:%M')}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã
            await self.notify_chat_members(chat_id, formatted_message)

            # –ï—Å–ª–∏ —ç—Ç–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message_type == 'emergency':
                await self.handle_emergency_message(chat_info['group_id'], content, sender_id)

            return message_id
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return None

    async def update_member_status(self, user_id: int, group_id: int, 
                                 status: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            await self.db.execute_query("""
                INSERT INTO member_statuses (user_id, group_id, status)
                VALUES (?, ?, ?)
                ON CONFLICT (user_id, group_id) 
                DO UPDATE SET status = ?, last_updated = CURRENT_TIMESTAMP
            """, (user_id, group_id, status, status))

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            if status == 'emergency':
                coordinator_id = await self.db.get_group_coordinator(group_id)
                user_info = await self.db.get_user(user_id)
                await self.notification.send_notification(
                    coordinator_id,
                    f"üö® –í–ù–ò–ú–ê–ù–ò–ï! {user_info['full_name']} —Å–æ–æ–±—â–∞–µ—Ç –æ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏!"
                )

            return True
        except Exception as e:
            logger.error(f"Error updating member status: {e}")
            return False

    async def create_quick_command(self, group_id: int, command: str, 
                                 description: str, created_by: int) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        try:
            return await self.db.execute_query_fetchone("""
                INSERT INTO quick_commands (group_id, command, description, created_by)
                VALUES (?, ?, ?, ?)
                RETURNING command_id
            """, (group_id, command, description, created_by))
        except Exception as e:
            logger.error(f"Error creating quick command: {e}")
            return None

    async def handle_emergency_message(self, group_id: int, content: str, sender_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
            coordinators = await self.db.execute_query_fetchall("""
                SELECT user_id FROM group_members 
                WHERE group_id = ? AND role = 'coordinator'
            """, (group_id,))

            # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sender_info = await self.db.get_user(sender_id)
            emergency_message = (
                "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï üö®\n\n"
                f"–û—Ç: {sender_info['full_name']}\n"
                f"–ì—Ä—É–ø–ø–∞: {group_id}\n\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {content}\n\n"
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º
            for coord in coordinators:
                await self.notification.send_notification(
                    coord['user_id'],
                    emergency_message,
                    level='critical'
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            await self.update_member_status(sender_id, group_id, 'emergency')

        except Exception as e:
            logger.error(f"Error handling emergency message: {e}")

    async def get_group_status(self, group_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
        try:
            return await self.db.execute_query_fetchall("""
                SELECT 
                    u.user_id,
                    u.full_name,
                    ms.status,
                    ms.last_updated
                FROM users u
                JOIN member_statuses ms ON u.user_id = ms.user_id
                WHERE ms.group_id = ?
                ORDER BY ms.last_updated DESC
            """, (group_id,))
        except Exception as e:
            logger.error(f"Error getting group status: {e}")
            return []