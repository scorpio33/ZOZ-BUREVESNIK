import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, 
    Application, 
    ConversationHandler,
    CallbackQueryHandler, 
    MessageHandler, 
    CommandHandler,
    filters
)
from core.menu_system import MenuSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class States:
    START = 'START'
    AUTH = 'AUTH'
    HELP_PROJECT = 'HELP_PROJECT'
    ABOUT = 'ABOUT'
    MAIN_MENU = 'MAIN_MENU'

class Bot:
    def __init__(self, application: Application):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        Args:
            application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –∏–∑ python-telegram-bot
        """
        self.application = application
        self.menu_system = MenuSystem()
        self.default_password = 'KREML'
        logger.info("Bot initialized")
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        Returns:
            str: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        try:
            keyboard = self.menu_system.get_start_keyboard()
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–∏—Å–∫ –æ–Ω–ª–∞–π–Ω - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–æ–≤–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.\n\n"
                "üîç –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "- –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö\n"
                "- –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã\n"
                "- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                "- –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
            logger.info(f"User {update.effective_user.id} started the bot")
            return States.START
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await self._handle_error(update)
            return States.START

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        Returns:
            str: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        try:
            query = update.callback_query
            await query.answer()
            
            logger.info(f"Button callback received: {query.data} from user {query.from_user.id}")
            
            if query.data == 'auth':
                await query.message.edit_text(
                    "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_start")
                    ]])
                )
                return States.AUTH
                
            elif query.data == 'back_to_start':
                keyboard = self.menu_system.get_start_keyboard()
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )
                return States.START
                
        except Exception as e:
            logger.error(f"Error in button_callback: {e}")
            await self._handle_error(update)
            return States.START

    async def handle_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        Returns:
            str: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        try:
            if not update.message:
                return States.AUTH
                
            entered_password = update.message.text
            user_id = update.effective_user.id
            
            logger.info(f"Auth attempt from user {user_id}")
            
            if entered_password == self.default_password:
                context.user_data['authorized'] = True
                keyboard = self.menu_system.get_keyboard('main')
                await update.message.reply_text(
                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )
                logger.info(f"User {user_id} successfully authorized")
                return States.MAIN_MENU
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
                    ]])
                )
                logger.warning(f"Failed auth attempt from user {user_id}")
                return States.AUTH
                
        except Exception as e:
            logger.error(f"Error in handle_auth: {e}")
            await self._handle_error(update)
            return States.AUTH

    async def _handle_error(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

    def get_conversation_handler(self) -> ConversationHandler:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
        Returns:
            ConversationHandler: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
        """
        return ConversationHandler(
            entry_points=[CommandHandler('start', self.start_command)],
            states={
                States.START: [
                    CallbackQueryHandler(self.button_callback, pattern='^(auth|back_to_start)$')
                ],
                States.AUTH: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_auth),
                    CallbackQueryHandler(self.button_callback, pattern='^back_to_start$')
                ],
                States.MAIN_MENU: [
                    CallbackQueryHandler(self.button_callback)
                ],
            },
            fallbacks=[CommandHandler('start', self.start_command)],
            per_message=True,  # –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã CallbackQueryHandler
            per_chat=True
        )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.application.initialize()
            await self.application.start()
            await self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            logger.error(f"Error running bot: {str(e)}")
            raise
        finally:
            if self.application:
                await self.application.stop()
