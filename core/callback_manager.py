from typing import Dict, Callable, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.states import States
import logging

logger = logging.getLogger(__name__)

class CallbackManager:
    def __init__(self, handlers):
        """
        Initialize callback manager with handlers
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ callback_data:
        - auth_* -> auth_handler
        - help_* -> donation_handler
        - map_* -> map_handler
        - search_* -> search_handler
        - coord_* -> coordinator_handler
        - stats_* -> statistics_handler
        - quest_* -> quest_handler
        """
        self.handlers = handlers
        self.callback_routes = {
            'auth': ['login', 'recovery'],
            'help': ['project'],
            'about': ['project'],
            'main': ['menu'],
            'back': ['to_start'],
            'search': ['menu'],
            'stats': ['menu'],
            'settings': ['menu'],
            'map': ['menu']
        }
        logger.info(f"CallbackManager initialized with {len(self.handlers)} handlers")
        
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries"""
        query = update.callback_query
        data = query.data
        
        try:
            if data == "search_menu":
                await self._handle_search_menu(query, context)
            elif data == "stats_menu":
                await self._handle_stats_menu(query, context)
            elif data == "settings_menu":
                await self._handle_settings_menu(query, context)
            elif data == "map_menu":
                await self._handle_map_menu(query, context)
            else:
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö callback
                parts = data.split('_', 1)
                if len(parts) < 2:
                    await query.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                    return
                    
                prefix, action = parts
                if prefix not in self.callback_routes or action not in self.callback_routes[prefix]:
                    await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    return
                    
                handler = self.handlers.get(prefix)
                if handler:
                    await handler.handle(update, context)
            
        except Exception as e:
            logger.error(f"Error in handle_callback: {str(e)}")
            await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
        
    async def _handle_auth_login(self, query, context):
        """Handle authorization login"""
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        await query.message.edit_text(
            "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = States.WAITING_PASSWORD
        await query.answer()
        
    async def _handle_help_project(self, query, context):
        """Handle help project menu"""
        keyboard = [
            [
                InlineKeyboardButton("TON", callback_data="donate_ton"),
                InlineKeyboardButton("USDT (TRC20)", callback_data="donate_usdt")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        await query.message.edit_text(
            "üíù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = States.HELP_PROJECT
        await query.answer()
        
    async def _handle_about_project(self, query, context):
        """Handle about project info"""
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        await query.message.edit_text(
            "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ:\n\n"
            "üîç Search and Rescue Bot - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ "
            "–ø–æ–∏—Å–∫–æ–≤–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏\n"
            "‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\n\n"
            "üì± –í–µ—Ä—Å–∏—è: 1.0.0\n"
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_username",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = States.ABOUT
        await query.answer()

    async def _handle_back_to_start(self, query, context):
        """Handle back to start menu"""
        keyboard = [
            [InlineKeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth_login")],
            [InlineKeyboardButton("üíù –ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É", callback_data="help_project")],
            [InlineKeyboardButton("‚ùì –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about_project")]
        ]
        await query.message.edit_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Search and Rescue Bot!\n\n"
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = States.START
        await query.answer()

    async def _handle_search_menu(self, query, context):
        """Handle search menu callback"""
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="search_start")],
            [InlineKeyboardButton("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="search_join")],
            [InlineKeyboardButton("üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è", callback_data="search_coord")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.message.edit_text(
            "üó∫ –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:\n\n"
            "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø–µ\n"
            "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await query.answer()

    async def _handle_stats_menu(self, query, context):
        """Handle statistics menu callback"""
        keyboard = [
            [InlineKeyboardButton("üìä –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_personal")],
            [InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_global")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.message.edit_text(
            "üìä –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await query.answer()

    async def _handle_settings_menu(self, query, context):
        """Handle settings menu callback"""
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.message.edit_text(
            "‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await query.answer()

    async def _handle_map_menu(self, query, context):
        """Handle map menu callback"""
        keyboard = [
            [InlineKeyboardButton("üó∫Ô∏è –ö–∞—Ä—Ç–∞", callback_data="map_menu")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.message.edit_text(
            "üó∫Ô∏è –ú–µ–Ω—é –∫–∞—Ä—Ç—ã:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await query.answer()
