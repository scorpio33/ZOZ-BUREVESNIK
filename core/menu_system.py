from dataclasses import dataclass
from typing import List, Dict, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

@dataclass
class MenuItem:
    text: str
    callback_data: str
    children: Optional[List['MenuItem']] = None

class MenuSystem:
    def __init__(self):
        self.menus: Dict[str, List[MenuItem]] = {
            'start': [
                MenuItem("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "auth"),  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "auth" –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
                MenuItem("üíù –ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É", "help_project"),
                MenuItem("‚ùì –û –ø—Ä–æ–µ–∫—Ç–µ", "about")
            ],
            'main': [
                MenuItem("üó∫ –ü–æ–∏—Å–∫", "search_menu"),
                MenuItem("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats_menu"),
                MenuItem("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings_menu"),
                MenuItem("üìç –ö–∞—Ä—Ç–∞", "map_menu")
            ],
            'help_project': [
                MenuItem("üíé TON", "donate_ton"),
                MenuItem("üíµ USDT", "donate_usdt"),
                MenuItem("¬´ –ù–∞–∑–∞–¥", "back_to_start")
            ]
        }

    def get_start_keyboard(self) -> InlineKeyboardMarkup:
        """Get keyboard for start menu"""
        keyboard = []
        for item in self.menus['start']:
            keyboard.append([InlineKeyboardButton(item.text, callback_data=item.callback_data)])
        return InlineKeyboardMarkup(keyboard)

    def get_keyboard(self, menu_id: str) -> InlineKeyboardMarkup:
        """Get keyboard for specified menu"""
        if menu_id not in self.menus:
            return InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
            ]])
        
        items = self.menus[menu_id]
        keyboard = []
        row = []
        
        for item in items:
            row.append(InlineKeyboardButton(item.text, callback_data=item.callback_data))
            if len(row) == 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                keyboard.append(row)
                row = []
                
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω—é –∫—Ä–æ–º–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ
        if menu_id != 'start':
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_start")])
            
        return InlineKeyboardMarkup(keyboard)

    def get_menu_text(self, menu_id: str) -> str:
        """Get text for specified menu"""
        texts = {
            'start': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            'main': "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            'search': "–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:",
            'stats': "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
            'settings': "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            'map': "–ö–∞—Ä—Ç–∞:",
            'help_project': "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
            'about': "–û –ø—Ä–æ–µ–∫—Ç–µ:"
        }
        return texts.get(menu_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
