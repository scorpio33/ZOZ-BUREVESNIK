import json
import logging
from datetime import datetime
from typing import Optional, Dict, List
from pathlib import Path
import csv
import xlsxwriter
from io import BytesIO

logger = logging.getLogger(__name__)

class ReportManager:
    def __init__(self, db_manager, notification_manager):
        self.db = db_manager
        self.notification_manager = notification_manager
        self.reports_dir = Path('data/reports')
        self.reports_dir.mkdir(parents=True, exist_ok=True)

    async def create_report(self, group_id: int, data: Dict) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç –≥—Ä—É–ø–ø—ã"""
        try:
            report_data = {
                'group_id': group_id,
                'report_type': data['type'],
                'content': data['content'],
                'location': json.dumps(data.get('location', {})),
                'findings': json.dumps(data.get('findings', [])),
                'status': data.get('status', 'submitted'),
                'created_at': datetime.now().isoformat()
            }
            
            report_id = await self.db.execute_query("""
                INSERT INTO group_reports 
                (group_id, report_type, content, location, findings, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
                RETURNING report_id
            """, tuple(report_data.values()))

            if report_id:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
                coordinator_id = await self.db.get_operation_coordinator(group_id)
                await self.notification_manager.send_notification(
                    coordinator_id,
                    f"üìã –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç –≥—Ä—É–ø–ø—ã #{group_id}\n"
                    f"–¢–∏–ø: {data['type']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {data['status']}"
                )
            
            return report_id
        except Exception as e:
            logger.error(f"Error creating report: {e}")
            return None

    async def get_group_reports(self, group_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –≥—Ä—É–ø–ø—ã"""
        try:
            reports = await self.db.fetch_all("""
                SELECT r.*, g.name as group_name
                FROM group_reports r
                JOIN search_groups g ON r.group_id = g.group_id
                WHERE r.group_id = ?
                ORDER BY r.created_at DESC
            """, (group_id,))
            
            return [{
                **report,
                'location': json.loads(report['location']),
                'findings': json.loads(report['findings'])
            } for report in reports]
        except Exception as e:
            logger.error(f"Error getting group reports: {e}")
            return []

    async def update_report_status(self, report_id: int, status: str, comment: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞"""
        try:
            await self.db.execute_query("""
                UPDATE group_reports
                SET status = ?, coordinator_comment = ?
                WHERE report_id = ?
            """, (status, comment, report_id))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            report = await self.db.fetch_one(
                "SELECT group_id FROM group_reports WHERE report_id = ?", 
                (report_id,)
            )
            
            if report:
                await self._notify_group_status_update(
                    report['group_id'], status, comment
                )
            
            return True
        except Exception as e:
            logger.error(f"Error updating report status: {e}")
            return False

    async def _notify_group_status_update(self, group_id: int, status: str, comment: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞"""
        status_emoji = {
            'approved': '‚úÖ',
            'rejected': '‚ùå',
            'pending': '‚è≥'
        }
        
        message = (
            f"{status_emoji.get(status, '‚ùì')} –°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω\n"
            f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status}\n"
        )
        if comment:
            message += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            
        members = await self.db.get_group_members(group_id)
        for member in members:
            await self.notification_manager.send_notification(
                member['user_id'],
                message
            )

    async def generate_operation_report(self, operation_id: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = await self.db.fetch_one("""
                SELECT * FROM search_operations 
                WHERE operation_id = ?
            """, (operation_id,))
            
            if not operation:
                return None

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º
            groups = await self.db.fetch_all("""
                SELECT g.*, COUNT(p.participant_id) as participants_count
                FROM search_groups g
                LEFT JOIN group_participants p ON g.group_id = p.group_id
                WHERE g.operation_id = ?
                GROUP BY g.group_id
            """, (operation_id,))

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
            tasks = await self.db.fetch_all("""
                SELECT t.*, COUNT(CASE WHEN t.status = 'completed' THEN 1 END) as completed_tasks,
                       COUNT(*) as total_tasks
                FROM coordination_tasks t
                WHERE t.operation_id = ?
                GROUP BY t.status
            """, (operation_id,))

            return {
                "operation": operation,
                "groups": groups,
                "tasks": tasks,
                "generated_at": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Error generating operation report: {e}")
            return None

    async def export_report(self, report_data: Dict, format: str = 'xlsx') -> Optional[bytes]:
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        try:
            if format == 'xlsx':
                return await self._export_to_xlsx(report_data)
            elif format == 'csv':
                return await self._export_to_csv(report_data)
            elif format == 'json':
                return json.dumps(report_data, indent=2).encode('utf-8')
            else:
                raise ValueError(f"Unsupported format: {format}")
        except Exception as e:
            logger.error(f"Error exporting report: {e}")
            return None

    async def _export_to_xlsx(self, report_data: Dict) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel —Ñ–æ—Ä–º–∞—Ç"""
        output = BytesIO()
        workbook = xlsxwriter.Workbook(output)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        header_format = workbook.add_format({
            'bold': True,
            'bg_color': '#4CAF50',
            'color': 'white'
        })

        # –õ–∏—Å—Ç —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        ws_main = workbook.add_worksheet('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        operation = report_data['operation']
        
        headers = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è']
        for col, header in enumerate(headers):
            ws_main.write(0, col, header, header_format)
            
        ws_main.write_row(1, 0, [
            operation['operation_id'],
            operation['name'],
            operation['status'],
            operation['start_date'],
            operation['end_date']
        ])

        # –õ–∏—Å—Ç —Å –≥—Ä—É–ø–ø–∞–º–∏
        ws_groups = workbook.add_worksheet('–ì—Ä—É–ø–ø—ã')
        group_headers = ['ID –≥—Ä—É–ø–ø—ã', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–°—Ç–∞—Ç—É—Å']
        for col, header in enumerate(group_headers):
            ws_groups.write(0, col, header, header_format)

        for row, group in enumerate(report_data['groups'], 1):
            ws_groups.write_row(row, 0, [
                group['group_id'],
                group['name'],
                group['participants_count'],
                group['status']
            ])

        workbook.close()
        return output.getvalue()

    async def _export_to_csv(self, report_data: Dict) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        output = BytesIO()
        writer = csv.writer(output)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        writer.writerow(['Operation Information'])
        writer.writerow(['ID', 'Name', 'Status', 'Start Date', 'End Date'])
        operation = report_data['operation']
        writer.writerow([
            operation['operation_id'],
            operation['name'],
            operation['status'],
            operation['start_date'],
            operation['end_date']
        ])

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
        writer.writerow([])
        writer.writerow(['Groups Information'])
        writer.writerow(['Group ID', 'Name', 'Participants Count', 'Status'])
        for group in report_data['groups']:
            writer.writerow([
                group['group_id'],
                group['name'],
                group['participants_count'],
                group['status']
            ])

        return output.getvalue()

    async def archive_operation(self, operation_id: int) -> bool:
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_data = await self.generate_operation_report(operation_id)
            if not report_data:
                return False

            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            archive_dir = self.reports_dir / 'archives' / str(operation_id)
            archive_dir.mkdir(parents=True, exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
            with open(archive_dir / 'report.json', 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ Excel
            excel_data = await self._export_to_xlsx(report_data)
            with open(archive_dir / 'report.xlsx', 'wb') as f:
                f.write(excel_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
            await self.db.execute("""
                UPDATE search_operations 
                SET status = 'archived', archived_at = ? 
                WHERE operation_id = ?
            """, (datetime.now().isoformat(), operation_id))

            return True
        except Exception as e:
            logger.error(f"Error archiving operation: {e}")
            return False
