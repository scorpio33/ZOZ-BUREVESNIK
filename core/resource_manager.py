from typing import Dict, List, Optional
from datetime import datetime, timedelta
import json
import logging

logger = logging.getLogger(__name__)

class ResourceManager:
    def __init__(self, db_manager, notification_manager):
        self.db = db_manager
        self.notification = notification_manager

    async def add_resource(self, data: Dict) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞"""
        try:
            query = """
                INSERT INTO resources (
                    category_id, name, description, serial_number,
                    status, condition, purchase_date, next_maintenance
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                RETURNING resource_id
            """
            params = (
                data['category_id'],
                data['name'],
                data.get('description'),
                data.get('serial_number'),
                data.get('status', 'available'),
                data.get('condition', 'good'),
                data.get('purchase_date'),
                data.get('next_maintenance')
            )
            return await self.db.execute_query_fetchone(query, params)
        except Exception as e:
            logger.error(f"Error adding resource: {e}")
            return None

    async def checkout_resource(self, resource_id: int, user_id: int, group_id: int, 
                              operation_id: int, return_date: datetime) -> bool:
        """–í—ã–¥–∞—á–∞ —Ä–µ—Å—É—Ä—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞
            resource = await self.db.execute_query_fetchone(
                "SELECT status, condition FROM resources WHERE resource_id = ?",
                (resource_id,)
            )
            
            if not resource or resource['status'] != 'available':
                return False

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–¥–∞—á–∏
            await self.db.execute_query("""
                INSERT INTO resource_transactions (
                    resource_id, user_id, group_id, operation_id,
                    action, condition_before, checkout_date, expected_return_date
                ) VALUES (?, ?, ?, ?, 'checkout', ?, CURRENT_TIMESTAMP, ?)
            """, (resource_id, user_id, group_id, operation_id, 
                  resource['condition'], return_date))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—Å—É—Ä—Å–∞
            await self.db.execute_query(
                "UPDATE resources SET status = 'in_use' WHERE resource_id = ?",
                (resource_id,)
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã–¥–∞—á–µ
            await self.notification.send_notification(
                user_id,
                f"üì¶ –í–∞–º –≤—ã–¥–∞–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (ID: {resource_id})\n"
                f"–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}"
            )

            return True
        except Exception as e:
            logger.error(f"Error checking out resource: {e}")
            return False

    async def return_resource(self, resource_id: int, user_id: int, condition: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—Ç —Ä–µ—Å—É—Ä—Å–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–¥–∞—á–∏
            transaction = await self.db.execute_query_fetchone("""
                SELECT transaction_id, condition_before 
                FROM resource_transactions 
                WHERE resource_id = ? AND user_id = ? AND action = 'checkout'
                AND actual_return_date IS NULL
            """, (resource_id, user_id))

            if not transaction:
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await self.db.execute_query("""
                UPDATE resource_transactions 
                SET actual_return_date = CURRENT_TIMESTAMP,
                    condition_after = ?
                WHERE transaction_id = ?
            """, (condition, transaction['transaction_id']))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
            await self.db.execute_query("""
                UPDATE resources 
                SET status = 'available',
                    condition = ?,
                    last_maintenance = CASE 
                        WHEN condition = 'poor' THEN CURRENT_TIMESTAMP
                        ELSE last_maintenance
                    END
                WHERE resource_id = ?
            """, (condition, resource_id))

            return True
        except Exception as e:
            logger.error(f"Error returning resource: {e}")
            return False

    async def plan_resources(self, operation_id: int, requirements: List[Dict]) -> bool:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö"""
        try:
            for req in requirements:
                await self.db.execute_query("""
                    INSERT INTO resource_planning (
                        operation_id, resource_category_id,
                        quantity_needed, priority, notes
                    ) VALUES (?, ?, ?, ?, ?)
                """, (
                    operation_id,
                    req['category_id'],
                    req['quantity'],
                    req.get('priority', 1),
                    req.get('notes')
                ))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤
            await self._check_resource_availability(operation_id)
            return True
        except Exception as e:
            logger.error(f"Error planning resources: {e}")
            return False

    async def _check_resource_availability(self, operation_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            plans = await self.db.execute_query_fetchall("""
                SELECT rp.*, rc.name as category_name
                FROM resource_planning rp
                JOIN resource_categories rc ON rp.resource_category_id = rc.category_id
                WHERE rp.operation_id = ? AND rp.status = 'pending'
            """, (operation_id,))

            for plan in plans:
                # –ü–æ–¥—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                available = await self.db.execute_query_fetchone("""
                    SELECT COUNT(*) as count
                    FROM resources
                    WHERE category_id = ? AND status = 'available'
                """, (plan['resource_category_id'],))

                if available['count'] < plan['quantity_needed']:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤
                    await self.notification.notify_coordinators(
                        f"‚ö†Ô∏è –ù–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ #{operation_id}\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {plan['category_name']}\n"
                        f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {plan['quantity_needed']}\n"
                        f"–î–æ—Å—Ç—É–ø–Ω–æ: {available['count']}"
                    )

        except Exception as e:
            logger.error(f"Error checking resource availability: {e}")