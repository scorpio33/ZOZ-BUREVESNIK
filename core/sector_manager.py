from typing import Dict, List, Optional
from datetime import datetime
import json
import logging
from shapely.geometry import Polygon, Point
from shapely.ops import unary_union
from .notification_manager import NotificationManager

logger = logging.getLogger(__name__)

class SectorManager:
    def __init__(self, db_manager, notification_manager: NotificationManager, map_service):
        self.db = db_manager
        self.notification_manager = notification_manager
        self.map_service = map_service

    async def create_sector(self, operation_id: int, data: Dict) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü —Å–µ–∫—Ç–æ—Ä–∞
            boundaries = data['boundaries']
            if len(boundaries) < 3:
                logger.error("Invalid sector boundaries: less than 3 points")
                return None

            polygon = Polygon(boundaries)
            if not polygon.is_valid:
                logger.error("Invalid polygon boundaries")
                return None

            # –°–æ–∑–¥–∞–µ–º GeoJSON –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
            geojson = {
                'type': 'Polygon',
                'coordinates': [boundaries + [boundaries[0]]]  # –ó–∞–º—ã–∫–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
            }

            # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ª—å–µ—Ñ–∞
            difficulty = await self._calculate_sector_difficulty(boundaries)

            sector_id = await self.db.execute("""
                INSERT INTO search_sectors 
                (operation_id, name, boundaries, priority, difficulty, 
                terrain_type, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?, 'pending', CURRENT_TIMESTAMP)
                RETURNING sector_id
            """, (
                operation_id,
                data['name'],
                json.dumps(geojson),
                data.get('priority', 1),
                difficulty,
                data.get('terrain_type', 'unknown')
            ))

            if sector_id:
                await self.notification_manager.notify_coordinators(
                    f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ–∫—Ç–æ—Ä '{data['name']}' –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ #{operation_id}"
                )
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç—ã —Å–µ–∫—Ç–æ—Ä–∞
                await self.map_service.generate_sector_preview(sector_id, boundaries)

            return sector_id

        except Exception as e:
            logger.error(f"Error creating sector: {e}")
            return None

    def get_sector_coverage(self, sector_id: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–µ–∫—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ç–æ—Ä–∞
            sector = self.db.get_sector(sector_id)
            if not sector:
                return 0.0

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤ —ç—Ç–æ–º —Å–µ–∫—Ç–æ—Ä–µ
            tracks = self.db.get_sector_tracks(sector_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å–µ–∫—Ç–æ—Ä–∞
            sector_bounds = json.loads(sector['boundaries'])
            sector_polygon = Polygon(sector_bounds['coordinates'][0])
            
            # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è —Ç—Ä–µ–∫–æ–≤ (–ø–æ–∫—Ä—ã—Ç–∞—è –æ–±–ª–∞—Å—Ç—å)
            covered_areas = []
            for track in tracks:
                points = json.loads(track['points_json'])
                track_line = [Point(p['lon'], p['lat']) for p in points]
                # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä 50 –º–µ—Ç—Ä–æ–≤ –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ —Ç—Ä–µ–∫–∞
                for point in track_line:
                    covered_areas.append(point.buffer(0.00045))  # ~50 –º–µ—Ç—Ä–æ–≤

            if not covered_areas:
                return 0.0

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–∫—Ä—ã—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏
            covered_union = unary_union(covered_areas)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
            coverage = (covered_union.intersection(sector_polygon).area / 
                      sector_polygon.area) * 100
            
            return min(100.0, coverage)
        except Exception as e:
            logger.error(f"Error calculating sector coverage: {e}")
            return 0.0

    async def update_sector_boundaries(self, sector_id: int, new_boundaries: List[tuple]) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å–µ–∫—Ç–æ—Ä–∞"""
        try:
            polygon = Polygon(new_boundaries)
            if not polygon.is_valid:
                return False

            geojson = {
                'type': 'Polygon',
                'coordinates': [new_boundaries + [new_boundaries[0]]]
            }

            success = await self.db.execute("""
                UPDATE search_sectors 
                SET boundaries = ?, 
                    updated_at = CURRENT_TIMESTAMP
                WHERE sector_id = ?
            """, (json.dumps(geojson), sector_id))

            if success:
                await self.map_service.generate_sector_preview(sector_id, new_boundaries)
                await self.notification_manager.notify_sector_teams(
                    sector_id, 
                    "üîÑ –ì—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
                )

            return success

        except Exception as e:
            logger.error(f"Error updating sector boundaries: {e}")
            return False

    async def assign_team_to_sector(self, sector_id: int, team_id: int) -> bool:
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–∫—Ç–æ—Ä"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Å–µ–∫—Ç–æ—Ä
            current_team = await self.db.fetchone(
                "SELECT assigned_team FROM search_sectors WHERE sector_id = ?",
                (sector_id,)
            )

            if current_team and current_team['assigned_team']:
                logger.warning(f"Sector {sector_id} already has assigned team")
                return False

            success = await self.db.execute("""
                UPDATE search_sectors 
                SET assigned_team = ?,
                    status = 'in_progress',
                    last_searched = CURRENT_TIMESTAMP
                WHERE sector_id = ?
            """, (team_id, sector_id))

            if success:
                await self.notification_manager.notify_team(
                    team_id,
                    f"üìç –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—ã–π —Å–µ–∫—Ç–æ—Ä"
                )

            return success

        except Exception as e:
            logger.error(f"Error assigning team to sector: {e}")
            return False

    async def update_sector_progress(self, sector_id: int, team_id: int, coverage: float) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ"""
        try:
            await self.db.execute("""
                INSERT INTO sector_progress 
                (sector_id, team_id, coverage_percent, search_date)
                VALUES (?, ?, ?, CURRENT_TIMESTAMP)
            """, (sector_id, team_id, coverage))

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–∫—Ç–æ—Ä–∞
            total_coverage = await self._calculate_total_coverage(sector_id)
            await self.db.execute("""
                UPDATE search_sectors 
                SET progress = ?,
                    status = CASE WHEN ? >= 100 THEN 'completed' ELSE 'in_progress' END
                WHERE sector_id = ?
            """, (total_coverage, total_coverage, sector_id))

            return True

        except Exception as e:
            logger.error(f"Error updating sector progress: {e}")
            return False

    async def _calculate_sector_difficulty(self, boundaries: List[tuple]) -> str:
        """–†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ª—å–µ—Ñ–∞"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å API –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ª—å–µ—Ñ–µ
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return 'normal'
        except Exception as e:
            logger.error(f"Error calculating sector difficulty: {e}")
            return 'normal'

    async def _calculate_total_coverage(self, sector_id: int) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ"""
        try:
            result = await self.db.fetchone("""
                SELECT AVG(coverage_percent) as avg_coverage
                FROM sector_progress
                WHERE sector_id = ?
                GROUP BY sector_id
            """, (sector_id,))
            
            return result['avg_coverage'] if result else 0.0

        except Exception as e:
            logger.error(f"Error calculating total coverage: {e}")
            return 0.0
