from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.group_manager import GroupManager
from core.states import States
import json
import logging

logger = logging.getLogger(__name__)

class GroupHandler:
    def __init__(self, group_manager: GroupManager):
        self.group_manager = group_manager

    async def show_group_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π"""
        query = update.callback_query
        group_id = context.user_data.get('current_group_id')
        
        if not group_id:
            await query.message.edit_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="search_menu")
                ]])
            )
            return

        keyboard = [
            [InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"group_members_{group_id}")],
            [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data=f"group_tasks_{group_id}")],
            [InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"group_location_{group_id}")],
            [InlineKeyboardButton("üì¢ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"group_messages_{group_id}")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"group_settings_{group_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="search_menu")]
        ]

        await query.message.edit_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã"""
        query = update.callback_query
        group_id = int(query.data.split('_')[-1])
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_member_{group_id}")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏", callback_data=f"change_roles_{group_id}")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"remove_member_{group_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"group_menu_{group_id}")]
        ]

        members = await self.group_manager.get_members(group_id)
        text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n\n"
        for member in members:
            text += f"‚Ä¢ {member['name']} - {member['role']}\n"

        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø—ã"""
        query = update.callback_query
        group_id = int(query.data.split('_')[-1])
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"new_task_{group_id}")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data=f"list_tasks_{group_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"group_menu_{group_id}")]
        ]

        await query.message.edit_text(
            "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã"""
        query = update.callback_query
        group_id = int(query.data.split('_')[-1])
        
        keyboard = [
            [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data=f"send_location_{group_id}")],
            [InlineKeyboardButton("üó∫ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"show_map_{group_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"group_menu_{group_id}")]
        ]

        await query.message.edit_text(
            "üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø—ã"""
        query = update.callback_query
        group_id = int(query.data.split('_')[-1])
        
        keyboard = [
            [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"send_message_{group_id}")],
            [InlineKeyboardButton("üì® –í—Ö–æ–¥—è—â–∏–µ", callback_data=f"inbox_{group_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"group_menu_{group_id}")]
        ]

        await query.message.edit_text(
            "üì¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
