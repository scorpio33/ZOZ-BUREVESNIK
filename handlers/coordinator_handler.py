import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from database.db_manager import DatabaseManager
from core.map_manager import MapManager
from services.notification_manager import NotificationManager

logger = logging.getLogger(__name__)

class CoordinatorHandler:
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
    MENU, CREATE_OPERATION, ACTIVE_OPERATIONS, ASSIGN_TASKS = range(4)

    def __init__(self, db_manager: DatabaseManager, map_manager: MapManager, notification_manager: NotificationManager):
        self.db = db_manager
        self.map_manager = map_manager
        self.notification_manager = notification_manager

    async def show_coordinator_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("üîç –°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data="coord_create_operation")],
            [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="coord_active_operations")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", callback_data="coord_manage_groups")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="coord_statistics")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        text = "üë®‚Äç‚úàÔ∏è –ú–µ–Ω—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞:\n\n" \
               "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏\n" \
               "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n" \
               "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏\n" \
               "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        if update.callback_query:
            await update.callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return self.MENU

    async def create_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ]
        await query.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return self.CREATE_OPERATION

    async def handle_operation_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        operation_name = update.message.text
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ë–î
        operation_id = await self.db.create_operation(user_id, operation_name)
        
        keyboard = [
            [InlineKeyboardButton("üìç –£–∫–∞–∑–∞—Ç—å —Ä–∞–π–æ–Ω –ø–æ–∏—Å–∫–∞", callback_data=f"set_search_area_{operation_id}")],
            [InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"add_members_{operation_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è '{operation_name}' —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"ID –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_id}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return self.MENU

    async def show_active_operations(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        operations = await self.db.get_active_operations(user_id)
        
        if not operations:
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]]
            await query.message.edit_text(
                "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return self.MENU
        
        text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
        keyboard = []
        
        for op in operations:
            text += f"üîç {op['name']} (ID: {op['id']})\n"
            keyboard.append([InlineKeyboardButton(
                f"üìù {op['name']}", 
                callback_data=f"view_operation_{op['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")])
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return self.ACTIVE_OPERATIONS

    async def assign_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
        query = update.callback_query
        await query.answer()
        
        operation_id = context.user_data.get('current_operation')
        if not operation_id:
            await query.message.edit_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")
                ]])
            )
            return self.MENU
        
        members = await self.db.get_operation_members(operation_id)
        if not members:
            await query.message.edit_text(
                "‚ùå –í –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")
                ]])
            )
            return self.MENU
        
        keyboard = []
        for member in members:
            keyboard.append([InlineKeyboardButton(
                f"üë§ {member['name']}", 
                callback_data=f"assign_task_{member['id']}"
            )])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")])
        
        await query.message.edit_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return self.ASSIGN_TASKS

    def get_handler(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        return ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.show_coordinator_menu, pattern='^coord_menu$')
            ],
            states={
                self.MENU: [
                    CallbackQueryHandler(self.create_operation, pattern='^coord_create_operation$'),
                    CallbackQueryHandler(self.show_active_operations, pattern='^coord_active_operations$'),
                    CallbackQueryHandler(self.assign_tasks, pattern='^coord_assign_tasks$')
                ],
                self.CREATE_OPERATION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_operation_name),
                    CallbackQueryHandler(self.show_coordinator_menu, pattern='^coord_menu$')
                ],
                self.ACTIVE_OPERATIONS: [
                    CallbackQueryHandler(self.show_coordinator_menu, pattern='^coord_menu$'),
                    CallbackQueryHandler(self.assign_tasks, pattern='^view_operation_\d+$')
                ],
                self.ASSIGN_TASKS: [
                    CallbackQueryHandler(self.show_coordinator_menu, pattern='^coord_menu$'),
                    CallbackQueryHandler(self.handle_task_assignment, pattern='^assign_task_\d+$')
                ]
            },
            fallbacks=[
                CallbackQueryHandler(self.show_coordinator_menu, pattern='^main_menu$')
            ],
            per_message=True
        )

    async def handle_task_assignment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        await query.answer()
        
        member_id = query.data.split('_')[-1]
        context.user_data['selected_member'] = member_id
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]]
        await query.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return self.ASSIGN_TASKS

    async def show_active_searches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤"""
        user_id = update.effective_user.id
        active_searches = self.coordination_manager.get_active_searches(coordinator_id=user_id)
        
        if not active_searches:
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]]
            await update.callback_query.message.edit_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        keyboard = []
        for search in active_searches:
            keyboard.append([
                InlineKeyboardButton(
                    f"üîç {search['title']} (ID: {search['operation_id']})",
                    callback_data=f"view_search_{search['operation_id']}"
                )
            ])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")])
        
        await update.callback_query.message.edit_text(
            "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_search_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, operation_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–∞"""
        search = self.coordination_manager.get_search_details(operation_id)
        
        if not search:
            await update.callback_query.message.edit_text(
                f"‚ùå –ü–æ–∏—Å–∫ —Å ID {operation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")
                ]])
            )
            return
        
        members = self.db.get_operation_members(operation_id)
        tasks = self.db.get_operation_tasks(operation_id)

        text = (
            f"üîç –ü–æ–∏—Å–∫: {search['title']}\n\n"
            f"üìç –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: {search['location']['latitude']}, {search['location']['longitude']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}\n"
            f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len([t for t in tasks if t['status'] != 'completed'])}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        keyboard = [
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", callback_data=f"coord_members_{operation_id}")],
            [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data=f"coord_tasks_{operation_id}")],
            [InlineKeyboardButton("üìç –û–±–Ω–æ–≤–∏—Ç—å –∑–æ–Ω—É –ø–æ–∏—Å–∫–∞", callback_data=f"coord_area_{operation_id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"coord_stats_{operation_id}")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫", callback_data=f"coord_complete_{operation_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ]

        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def manage_operation_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        operation_id = int(update.callback_query.data.split('_')[-1])
        members = self.db.get_operation_members(operation_id)

        text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n\n"
        keyboard = []

        for member in members:
            user = self.db.get_user(member['user_id'])
            status_emoji = "‚úÖ" if member['status'] == 'active' else "‚ùå"
            text += f"{status_emoji} {user['username']} - {member['role']}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"{'üîÑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' if member['status'] == 'active' else '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'} {user['username']}", 
                    callback_data=f"coord_toggle_member_{operation_id}_{member['user_id']}"
                )
            ])

        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"coord_add_member_{operation_id}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"coord_control_{operation_id}")])

        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def manage_operation_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        operation_id = int(update.callback_query.data.split('_')[-1])
        tasks = self.db.get_operation_tasks(operation_id)

        text = "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n\n"
        keyboard = []

        for task in tasks:
            status_emoji = {
                'pending': "‚è≥",
                'in_progress': "‚ñ∂Ô∏è",
                'completed': "‚úÖ"
            }.get(task['status'], "‚ùì")
            
            text += f"{status_emoji} {task['title']}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {task['title']}", 
                    callback_data=f"coord_task_{operation_id}_{task['task_id']}"
                )
            ])

        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"coord_create_task_{operation_id}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"coord_control_{operation_id}")])

        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def complete_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        operation_id = int(update.callback_query.data.split('_')[-1])
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"coord_confirm_complete_{operation_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"coord_control_{operation_id}")
            ]
        ]

        await update.callback_query.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_coordinator_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        stats = await self.db.get_coordinator_statistics(user_id)
        
        if not stats:
            await update.callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")
                ]])
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        operations = stats['operations']
        recent = stats['recent']
        
        text = (
            "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üîç –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {operations['total_operations']}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {operations['completed_operations']}\n"
            f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {operations['cancelled_operations']}\n"
            f"‚≠êÔ∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {operations['avg_success_rate']:.1f}%\n\n"
            
            "üìà <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>\n"
            f"üë• –ö–æ–º–∞–Ω–¥ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: {operations['avg_team_count']:.1f}\n"
            f"üë§ –í–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: {operations['avg_volunteer_count']:.1f}\n\n"
            
            "üóì <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</b>\n"
            f"üîç –û–ø–µ—Ä–∞—Ü–∏–π: {recent['recent_operations']}\n"
            f"‚≠êÔ∏è –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {recent['recent_success_rate']:.1f}%\n"
        )

        keyboard = [
            [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="coord_stats_history")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="coord_stats_rating")],
            [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="coord_stats_graphs")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ]

        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def show_operation_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        page = context.user_data.get('history_page', 0)
        ITEMS_PER_PAGE = 5
        
        operations = await self.db.get_coordinator_operation_history(
            user_id,
            limit=ITEMS_PER_PAGE,
            offset=page * ITEMS_PER_PAGE
        )
        
        if not operations:
            text = "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_stats")]]
        else:
            text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n"
            for op in operations:
                status_emoji = {
                    'completed': '‚úÖ',
                    'cancelled': '‚ùå',
                    'active': '‚ñ∂Ô∏è'
                }.get(op['status'], '‚ùì')
                
                text += (
                    f"{status_emoji} <b>{op['operation_title']}</b>\n"
                    f"üìç –õ–æ–∫–∞—Ü–∏—è: {op['operation_location']}\n"
                    f"üë• –ì—Ä—É–ø–ø: {op['groups_stats']['total_groups']}\n"
                    f"üë§ –í–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤: {op['groups_stats']['total_volunteers']}\n"
                    f"‚≠êÔ∏è –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {op['success_rate']:.1f}%\n"
                    f"üìÖ {op['start_time']}\n\n"
                )

            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard = []
            if page > 0:
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data="coord_stats_history_prev")])
            if len(operations) == ITEMS_PER_PAGE:
                keyboard.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ", callback_data="coord_stats_history_next")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_stats")])

        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def show_rating_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
        user_id = update.effective_user.id
        rating = await self.db.get_coordinator_rating_details(user_id)
        
        if not rating:
            await update.callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_stats")
                ]])
            )
            return

        text = (
            "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {rating['success_rate']:.1f}%\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π: {rating['avg_success_rate']:.1f}\n\n"
            
            "<b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥:</b>\n"
            f"üë• –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: {rating['avg_team_count']:.1f}\n"
            f"üë§ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤: {rating['avg_volunteer_count']:.1f}\n"
            f"üìä –ú–∞–∫—Å–∏–º—É–º –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤: {rating['max_volunteer_count']}\n\n"
            
            "<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"üîç –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {rating['total_operations']}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {rating['successful_operations']}\n"
            f"üìÖ –û–ø–µ—Ä–∞—Ü–∏–π –∑–∞ 30 –¥–Ω–µ–π: {rating['recent_operations']}\n"
        )

        keyboard = [
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_stats")]
        ]

        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def handle_statistics_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        query = update.callback_query
        data = query.data

        if data == "coord_stats":
            await self.show_coordinator_statistics(update, context)
        
        elif data == "coord_stats_history":
            context.user_data['history_page'] = 0
            await self.show_operation_history(update, context)
        
        elif data == "coord_stats_history_next":
            context.user_data['history_page'] = context.user_data.get('history_page', 0) + 1
            await self.show_operation_history(update, context)
        
        elif data == "coord_stats_history_prev":
            context.user_data['history_page'] = max(0, context.user_data.get('history_page', 0) - 1)
            await self.show_operation_history(update, context)
        
        elif data == "coord_stats_rating":
            await self.show_rating_details(update, context)
        
        elif data == "coord_stats_graphs":
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            await query.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def show_member_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="coord_add_member")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="coord_remove_member")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="coord_list_members")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_active_operations(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        operations = self.db.get_active_operations(coordinator_id=user_id)
        
        if not operations:
            text = "üîç –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]]
        else:
            text = "üîç –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
            keyboard = []
            for op in operations:
                text += f"üìç {op['title']}\n"
                keyboard.append([
                    InlineKeyboardButton(
                        f"–£–ø—Ä–∞–≤–ª—è—Ç—å: {op['title']}", 
                        callback_data=f"coord_manage_op_{op['operation_id']}"
                    )
                ])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")])
        
        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def manage_search_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π"""
        operation_id = int(update.callback_query.data.split('_')[-1])
        operation = await self.db.get_operation(operation_id)
        
        if not operation:
            await update.callback_query.message.edit_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")
                ]])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        stats = await self.stats_manager.get_operation_stats(operation_id)
        
        text = (
            f"üìã –û–ø–µ—Ä–∞—Ü–∏—è: {operation['title']}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {operation['location']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['member_count']}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {stats['completed_tasks']}/{stats['total_tasks']}\n"
            f"üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ —Å–µ–∫—Ç–æ—Ä–æ–≤: {stats['completed_sectors']}/{stats['total_sectors']}"
        )

        keyboard = [
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", callback_data=f"coord_members_{operation_id}")],
            [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data=f"coord_tasks_{operation_id}")],
            [InlineKeyboardButton("üó∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞–º–∏", callback_data=f"coord_sectors_{operation_id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"coord_stats_{operation_id}")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data=f"coord_complete_{operation_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ]

        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_coordination_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏", callback_data="coord_active_searches")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="coord_create_search")],
            [
                InlineKeyboardButton("üó∫ –ö–∞—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="coord_map"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="coord_stats")
            ],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", callback_data="coord_manage_groups")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "üéØ –ú–µ–Ω—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞\n\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –∫–∞—Ä—Ç–µ\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_operation_map_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –∫–∞—Ä—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        operations = await self.db.get_active_operations(coordinator_id=update.effective_user.id)
        
        if not operations:
            await query.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")
                ]])
            )
            return
        
        keyboard = []
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        for op in operations:
            keyboard.append([
                InlineKeyboardButton(
                    f"üó∫ {op['name']}", 
                    callback_data=f"coord_map_view_{op['id']}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã
        keyboard.extend([
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã", callback_data="coord_map_settings"),
                InlineKeyboardButton("üìç –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É", callback_data="coord_add_point")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ])
        
        await query.message.edit_text(
            "üó∫ –ö–∞—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_map_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã"""
        keyboard = [
            [
                InlineKeyboardButton("üó∫ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã", callback_data="map_type_yandex"),
                InlineKeyboardButton("üåç OpenStreetMap", callback_data="map_type_osm")
            ],
            [
                InlineKeyboardButton("üì° –°–ø—É—Ç–Ω–∏–∫", callback_data="map_type_satellite"),
                InlineKeyboardButton("üè∑ –ì–∏–±—Ä–∏–¥", callback_data="map_type_hybrid")
            ],
            [
                InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="map_export"),
                InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç", callback_data="map_import")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã\n\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ–µ–≤",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_map_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ä—Ç—ã"""
        query = update.callback_query
        operation_id = context.user_data.get('current_operation_id')
        
        if not operation_id:
            await query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üìç GPX", callback_data=f"export_gpx_{operation_id}"),
                InlineKeyboardButton("üó∫ KML", callback_data=f"export_kml_{operation_id}")
            ],
            [
                InlineKeyboardButton("üìä JSON", callback_data=f"export_json_{operation_id}"),
                InlineKeyboardButton("üìë CSV", callback_data=f"export_csv_{operation_id}")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_map_settings")]
        ]
        
        await query.message.edit_text(
            "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
            "‚Ä¢ GPX - –¥–ª—è GPS-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ KML - –¥–ª—è Google Earth\n"
            "‚Ä¢ JSON - –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ CSV - –¥–ª—è —Ç–∞–±–ª–∏—Ü",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def request_coordinator_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
        existing_request = await self.db.execute_query_fetchone(
            "SELECT status FROM coordinator_requests WHERE user_id = ?", 
            (user_id,)
        )
        
        if existing_request:
            if existing_request['status'] == 'pending':
                await update.callback_query.message.edit_text(
                    "‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")
                    ]])
                )
                return
            elif existing_request['status'] == 'approved':
                await update.callback_query.message.edit_text(
                    "‚úÖ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º!",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")
                    ]])
                )
                return

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        context.user_data['coord_request_state'] = 'full_name'
        await update.callback_query.message.edit_text(
            "üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n"
            "1Ô∏èÔøΩÔøΩ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="settings_menu")
            ]])
        )

    async def _request_region(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏–æ–Ω–∞"""
        context.user_data['coord_request_state'] = 'region'
        await update.message.reply_text(
            "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å –∏ –≥–æ—Ä–æ–¥:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="settings_menu")
            ]])
        )

    async def _request_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        context.user_data['coord_request_state'] = 'phone'
        await update.message.reply_text(
            "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="settings_menu")
            ]])
        )

    async def _request_team(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç—Ä—è–¥–∞"""
        context.user_data['coord_request_state'] = 'team'
        await update.message.reply_text(
            "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –æ—Ç—Ä—è–¥–∞:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="settings_menu")
            ]])
        )

    async def _request_position(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        context.user_data['coord_request_state'] = 'position'
        keyboard = [
            [InlineKeyboardButton("–í–æ–ª–æ–Ω—Ç—ë—Ä", callback_data="position_volunteer")],
            [InlineKeyboardButton("–°—Ç–∞—Ä—à–∏–π –≥—Ä—É–ø–ø—ã", callback_data="position_leader")],
            [InlineKeyboardButton("–ü–æ–º–æ—â–Ω–∏–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞", callback_data="position_assistant")],
            [InlineKeyboardButton("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä", callback_data="position_coordinator")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="settings_menu")]
        ]
        await update.message.reply_text(
            "5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –æ—Ç—Ä—è–¥–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _request_experience(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –æ–ø—ã—Ç–∞"""
        context.user_data['coord_request_state'] = 'experience'
        await update.message.reply_text(
            "6Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ:\n"
            "- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–µ–∑–¥–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫–∏\n"
            "- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ç—Ä—è–¥–µ\n\n"
            "–§–æ—Ä–º–∞—Ç: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤—ã–µ–∑–¥–æ–≤, –≤—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã\n"
            "–ü—Ä–∏–º–µ—Ä: 15, 2 –≥–æ–¥–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="settings_menu")
            ]])
        )

    async def handle_coordinator_request_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        message = update.message.text
        state = context.user_data.get('coord_request_state')

        if not state:
            return

        try:
            if state == 'full_name':
                context.user_data['coord_request'] = {'full_name': message}
                await self._request_region(update, context)
            elif state == 'region':
                context.user_data['coord_request']['region'] = message
                await self._request_phone(update, context)
            elif state == 'phone':
                context.user_data['coord_request']['phone'] = message
                await self._request_team(update, context)
            elif state == 'team':
                context.user_data['coord_request']['team'] = message
                await self._request_position(update, context)
            elif state == 'position':
                context.user_data['coord_request']['position'] = message
                await self._request_experience(update, context)
            elif state == 'experience':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self._save_coordinator_request(update, context)
        except Exception as e:
            logger.error(f"Error in coordinator request: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")
                ]])
            )

    async def _save_coordinator_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        request_data = context.user_data.get('coord_request', {})
        
        await self.db.execute(
            """
            INSERT INTO coordinator_requests 
            (user_id, username, full_name, region, phone_number, team_name, 
             position, search_count, experience_years, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending')
            """,
            (user_id, update.effective_user.username, request_data.get('full_name'),
             request_data.get('region'), request_data.get('phone'),
             request_data.get('team'), request_data.get('position'),
             request_data.get('search_count', 0),
             request_data.get('experience_years', 0))
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        context.user_data.pop('coord_request', None)
        context.user_data.pop('coord_request_state', None)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
            "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ —Å–æ–æ–±—â–∏–º –æ —Ä–µ—à–µ–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")
            ]])
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        await self._notify_developer_about_request(update, context)

    async def _notify_developer_about_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        if not hasattr(context.bot, 'developer_id'):
            return
            
        await context.bot.send_message(
            chat_id=context.bot.developer_id,
            text=f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞!\n"
                 f"–û—Ç: @{update.effective_user.username}\n"
                 f"ID: {update.effective_user.id}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="dev_requests")
            ]])
        )
