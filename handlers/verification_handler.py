import logging
import random
import string
from datetime import datetime, timedelta
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.states import States
from utils.email_sender import EmailSender
from utils.phone_utils import PhoneUtils
from utils.security_utils import SecurityUtils
from config.settings import ALLOWED_DOCUMENT_TYPES, MAX_DOCUMENT_SIZE

logger = logging.getLogger(__name__)

class VerificationHandler:
    def __init__(self, db_manager):
        self.db = db_manager
        self.email_sender = EmailSender()
        self.phone_utils = PhoneUtils()
        self.security = SecurityUtils()
        self.verification_codes = {}
        self.verification_attempts = {}
        
    async def start_verification(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="verify_phone")],
            [InlineKeyboardButton("üìß –ü–æ email", callback_data="verify_email")],
            [InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="verify_docs")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]
        
        await query.message.edit_text(
            "üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = States.VERIFICATION_START
        
    async def handle_phone_verification(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", callback_data="share_phone")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_verification")]
        ]
        
        await query.message.edit_text(
            "üì± –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä¬ª\n"
            "2. –í–∞–º –ø—Ä–∏–¥–µ—Ç SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥\n\n"
            "‚ÑπÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = States.VERIFICATION_PHONE
        
    async def handle_email_verification(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ email"""
        query = update.callback_query
        await query.answer()
        
        await query.message.edit_text(
            "üìß –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ email\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å –≤ —á–∞—Ç.\n"
            "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ –Ω–µ–≥–æ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_verification")
            ]])
        )
        context.user_data['state'] = States.VERIFICATION_EMAIL
        
    async def handle_docs_verification(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        await query.message.edit_text(
            "üìÑ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Å–∫–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n"
            "- –ü–∞—Å–ø–æ—Ä—Ç (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n"
            "- –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ —Å–ø–∞—Å–∞—Ç–µ–ª—è\n"
            "- –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞\n\n"
            "‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:\n"
            f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_DOCUMENT_SIZE/1024/1024:.1f} –ú–ë\n"
            "- –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, PDF\n"
            "- –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_verification")
            ]])
        )
        context.user_data['state'] = States.VERIFICATION_DOCS
        
    async def handle_phone_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        user_id = update.effective_user.id
        code = update.message.text.strip()
        
        if not self._validate_verification_attempts(user_id):
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
            
        stored_code = self.verification_codes.get(user_id)
        if stored_code and stored_code == code:
            await self._complete_verification(update, context, "phone")
        else:
            await self._handle_failed_verification(update, context)
            
    async def handle_email_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
        user_id = update.effective_user.id
        code = update.message.text.strip()
        
        if not self._validate_verification_attempts(user_id):
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
            
        stored_code = self.verification_codes.get(user_id)
        if stored_code and stored_code == code:
            await self._complete_verification(update, context, "email")
        else:
            await self._handle_failed_verification(update, context)
            
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if not document.mime_type in ALLOWED_DOCUMENT_TYPES:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, PDF"
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if document.file_size > MAX_DOCUMENT_SIZE:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_DOCUMENT_SIZE/1024/1024:.1f} –ú–ë"
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        file = await context.bot.get_file(document.file_id)
        file_path = f"temp/docs/{update.effective_user.id}_{document.file_name}"
        await file.download_to_drive(file_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await self._send_document_for_review(update, context, file_path)
        
    async def _send_document_for_review(self, update: Update, context: ContextTypes.DEFAULT_TYPE, file_path: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ –ë–î
        self.db.save_verification_document(
            user_id=user.id,
            document_path=file_path,
            status="pending"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            "üìÑ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        logger.info(f"User {user.id} uploaded document for verification: {file_path}")
        
    def _generate_verification_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        return ''.join(random.choices(string.digits, k=6))
        
    def _validate_verification_attempts(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        attempts = self.verification_attempts.get(user_id, {"count": 0, "last_attempt": None})
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ 24 —á–∞—Å–æ–≤
        if attempts["last_attempt"] and \
           datetime.now() - attempts["last_attempt"] > timedelta(hours=24):
            attempts = {"count": 0, "last_attempt": None}
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        if attempts["count"] >= 3:
            return False
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        attempts["count"] += 1
        attempts["last_attempt"] = datetime.now()
        self.verification_attempts[user_id] = attempts
        
        return True
        
    async def _complete_verification(self, update: Update, context: ContextTypes.DEFAULT_TYPE, method: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ë–î
        self.db.update_user_verification(
            user_id=user_id,
            verified=True,
            verification_method=method
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.verification_codes.pop(user_id, None)
        self.verification_attempts.pop(user_id, None)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data['state'] = States.MAIN_MENU
        
    async def _handle_failed_verification(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        attempts = self.verification_attempts.get(update.effective_user.id, {"count": 0})
        attempts_left = 3 - attempts["count"]
        
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}"
        )