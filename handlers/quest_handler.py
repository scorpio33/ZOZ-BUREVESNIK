import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.quests import QUEST_CATEGORIES, QUESTS, LEVEL_THRESHOLDS, LEVEL_REWARDS
from database.db_manager import DatabaseManager

logger = logging.getLogger(__name__)

class QuestHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def show_quest_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤"""
        user_id = update.effective_user.id
        user = await self.db.get_user(user_id)
        
        keyboard = []
        for category_id, category_name in QUEST_CATEGORIES.items():
            available_quests = await self._get_available_quests(user_id, category_id)
            if available_quests:
                keyboard.append([InlineKeyboardButton(
                    f"{category_name} ({len(available_quests)})", 
                    callback_data=f"quest_category_{category_id}"
                )])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")])
        
        text = (
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã\n\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {user['level']}\n"
            f"–û–ø—ã—Ç: {user['experience']}/{LEVEL_THRESHOLDS[user['level'] + 1]}\n"
            f"–ú–æ–Ω–µ—Ç—ã: {user['coins']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–≤–µ—Å—Ç–æ–≤:"
        )
        
        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_category_quests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–≤–µ—Å—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        category_id = query.data.split('_')[-1]
        user_id = update.effective_user.id
        
        available_quests = await self._get_available_quests(user_id, category_id)
        
        keyboard = []
        for quest in available_quests:
            status = await self._get_quest_status(user_id, quest['quest_id'])
            icon = self._get_status_icon(status)
            keyboard.append([InlineKeyboardButton(
                f"{icon} {quest['title']}", 
                callback_data=f"quest_view_{quest['quest_id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="quest_menu")])
        
        await query.message.edit_text(
            f"üìã {QUEST_CATEGORIES[category_id]}\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_quest_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, quest_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–≤–µ—Å—Ç–∞"""
        quest = QUESTS[quest_id]
        user_id = update.effective_user.id
        status = await self._get_quest_status(user_id, quest_id)
        progress = await self._get_quest_progress(user_id, quest_id)
        
        keyboard = []
        if status == 'available':
            keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data=f"quest_start_{quest_id}")])
        elif status == 'in_progress':
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"quest_complete_{quest_id}")])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"quest_category_{quest['category']}")])
        
        text = (
            f"üìã {quest['title']}\n\n"
            f"{quest['description']}\n\n"
            f"üí´ –ù–∞–≥—Ä–∞–¥—ã:\n"
            f"‚Ä¢ –û–ø—ã—Ç: {quest['reward_exp']}\n"
            f"‚Ä¢ –ú–æ–Ω–µ—Ç—ã: {quest['reward_coins']}\n\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
            f"–°—Ç–∞—Ç—É—Å: {self._get_status_text(status)}"
        )
        
        await update.callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_quest_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–≤–µ—Å—Ç–∞–º–∏"""
        query = update.callback_query
        action = query.data.split('_')[1]
        quest_id = query.data.split('_')[2]
        user_id = update.effective_user.id
        
        if action == 'start':
            await self._start_quest(user_id, quest_id)
            await self.show_quest_details(update, context, quest_id)
        
        elif action == 'complete':
            if await self._check_quest_completion(user_id, quest_id):
                await self._complete_quest(user_id, quest_id)
                await self._show_completion_message(update, context, quest_id)
            else:
                await query.answer("‚ùå –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã")

    async def _get_available_quests(self, user_id: int, category: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.db.get_user(user_id)
        available = []
        
        for quest_id, quest in QUESTS.items():
            if quest['category'] == category and user['level'] >= quest['required_level']:
                available.append({**quest, 'quest_id': quest_id})
        
        return available

    async def _get_quest_status(self, user_id: int, quest_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–≤–µ—Å—Ç–∞"""
        return await self.db.get_quest_status(user_id, quest_id)

    async def _get_quest_progress(self, user_id: int, quest_id: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
        return await self.db.get_quest_progress(user_id, quest_id)

    def _get_status_icon(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞"""
        icons = {
            'available': '‚≠êÔ∏è',
            'in_progress': '‚ñ∂Ô∏è',
            'completed': '‚úÖ',
            'failed': '‚ùå'
        }
        return icons.get(status, '‚ùì')

    def _get_status_text(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞"""
        texts = {
            'available': '–î–æ—Å—Ç—É–ø–µ–Ω',
            'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'failed': '–ü—Ä–æ–≤–∞–ª–µ–Ω'
        }
        return texts.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
