from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.communication_manager import CommunicationManager
import logging

logger = logging.getLogger(__name__)

class CommunicationHandler:
    def __init__(self, communication_manager: CommunicationManager):
        self.comm_manager = communication_manager

    async def show_communication_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()

        group_id = context.user_data.get('current_group_id')
        if not group_id:
            await query.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]])
            )
            return

        keyboard = [
            [InlineKeyboardButton("üí¨ –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç", callback_data=f"chat_{group_id}")],
            [InlineKeyboardButton("üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"alerts_{group_id}")],
            [InlineKeyboardButton("‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data=f"quick_commands_{group_id}")],
            [InlineKeyboardButton("üë• –°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"members_status_{group_id}")],
            [InlineKeyboardButton("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"emergency_{group_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="group_menu")]
        ]

        await query.message.edit_text(
            "üì± –ú–µ–Ω—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_status_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        query = update.callback_query
        await query.answer()

        status = query.data.split('_')[1]
        group_id = context.user_data.get('current_group_id')
        user_id = update.effective_user.id

        if await self.comm_manager.update_member_status(user_id, group_id, status):
            status_emoji = {
                'active': '‚úÖ',
                'resting': 'üò¥',
                'unavailable': '‚ùå',
                'emergency': 'üö®'
            }.get(status, '‚ùì')

            await query.message.edit_text(
                f"{status_emoji} –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="communication_menu")
                ]])
            )

    async def send_emergency_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()

        context.user_data['state'] = 'waiting_emergency_message'
        
        await query.message.edit_text(
            "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º "
            "–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã.\n\n"
            "‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —Ä–µ–∞–ª—å–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="communication_menu")
            ]])
        )

    async def handle_message_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        state = context.user_data.get('state')
        if not state:
            return

        if state == 'waiting_emergency_message':
            group_id = context.user_data.get('current_group_id')
            content = update.message.text
            sender_id = update.effective_user.id

            # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —á–∞—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            chat_info = await self.comm_manager.get_or_create_emergency_chat(group_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.comm_manager.send_message(
                chat_info['chat_id'],
                sender_id,
                content,
                message_type='emergency'
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)

            await update.message.reply_text(
                "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
                "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ö –º–µ–Ω—é —Å–≤—è–∑–∏", callback_data="communication_menu")
                ]])
            )