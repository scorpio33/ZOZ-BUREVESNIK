from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.sector_manager import SectorManager
from core.states import States
import json
import logging

logger = logging.getLogger(__name__)

class SectorHandler:
    def __init__(self, sector_manager: SectorManager, map_service):
        self.sector_manager = sector_manager
        self.map_service = map_service

    async def show_sectors_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞–º–∏"""
        query = update.callback_query
        operation_id = context.user_data.get('current_operation_id')

        if not operation_id:
            await query.message.edit_text(
                "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")
                ]])
            )
            return

        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ç–æ—Ä", callback_data="create_sector")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤", callback_data="list_sectors")],
            [InlineKeyboardButton("üó∫ –ö–∞—Ä—Ç–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤", callback_data="map_sectors")],
            [InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞", callback_data="search_progress")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="operation_menu")]
        ]

        await query.message.edit_text(
            "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def start_sector_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞"""
        query = update.callback_query
        context.user_data['state'] = States.ENTERING_SECTOR_NAME

        keyboard = [[InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="sectors_menu")]]
        
        await query.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_sector_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–∞"""
        state = context.user_data.get('state')
        sector_data = context.user_data.get('sector_data', {})

        if state == States.ENTERING_SECTOR_NAME:
            sector_data['name'] = update.message.text
            context.user_data['state'] = States.ENTERING_SECTOR_BOUNDARIES
            context.user_data['sector_data'] = sector_data

            await update.message.reply_text(
                "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–≥–ª–æ–≤ —Å–µ–∫—Ç–æ—Ä–∞.\n"
                "–§–æ—Ä–º–∞—Ç: lat1,lon1;lat2,lon2;lat3,lon3\n"
                "–ú–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="sectors_menu")
                ]])
            )

        elif state == States.ENTERING_SECTOR_BOUNDARIES:
            try:
                points = [
                    tuple(float(coord) for coord in point.split(','))
                    for point in update.message.text.split(';')
                ]

                if len(points) < 3:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞"
                    )
                    return

                sector_data['boundaries'] = points
                operation_id = context.user_data.get('current_operation_id')

                sector_id = await self.sector_manager.create_sector(
                    operation_id=operation_id,
                    data=sector_data
                )

                if sector_id:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç—ã
                    map_image = await self.map_service.generate_sector_preview(points)
                    
                    await update.message.reply_photo(
                        map_image,
                        caption=f"‚úÖ –°–µ–∫—Ç–æ—Ä '{sector_data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
                    )
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–µ–∫—Ç–æ—Ä–æ–≤
                    await self.show_sectors_menu(update, context)
                else:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ç–æ—Ä–∞"
                    )

            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: lat1,lon1;lat2,lon2;lat3,lon3"
                )

    async def show_sector_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤"""
        query = update.callback_query
        operation_id = context.user_data.get('current_operation_id')

        sectors = await self.sector_manager.get_operation_sectors(operation_id)
        
        if not sectors:
            await query.message.edit_text(
                "üìã –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="sectors_menu")
                ]])
            )
            return

        text = "üìã –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤:\n\n"
        keyboard = []

        for sector in sectors:
            status_emoji = {
                'pending': '‚ö™Ô∏è',
                'in_progress': 'üîµ',
                'completed': 'üü¢'
            }.get(sector['status'], '‚ö™Ô∏è')

            text += (f"{status_emoji} {sector['name']}\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {sector['progress']}%\n"
                    f"–°—Ç–∞—Ç—É—Å: {sector['status']}\n\n")

            keyboard.append([
                InlineKeyboardButton(
                    f"üìù {sector['name']}", 
                    callback_data=f"sector_{sector['sector_id']}"
                )
            ])

        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="sectors_menu")])

        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
