from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import json
from core.coordination_manager import CoordinationManager
from core.states import States
import logging

logger = logging.getLogger(__name__)

class CoordinationHandler:
    def __init__(self, coordination_manager, notification_manager):
        self.coordination_manager = coordination_manager
        self.notification_manager = notification_manager

    async def show_coordination_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()

        operation_id = context.user_data.get('current_operation_id')
        if not operation_id:
            await query.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]])
            )
            return

        keyboard = [
            [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="coord_tasks")],
            [InlineKeyboardButton("üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã", callback_data="coord_resources")],
            [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="coord_reports")],
            [InlineKeyboardButton("‚ö°Ô∏è –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="coord_operational")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]

        await query.message.edit_text(
            "üéØ –ú–µ–Ω—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def create_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        await query.answer()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        context.user_data['creating_task'] = True
        keyboard = [[InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="coord_tasks")]]
        
        await query.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return "AWAIT_TASK_TITLE"

    async def handle_task_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        title = update.message.text
        context.user_data['task_title'] = title

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        keyboard = [
            [
                InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data="task_priority_1"),
                InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="task_priority_2")
            ],
            [
                InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="task_priority_3"),
                InlineKeyboardButton("‚ö°Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", callback_data="task_priority_4")
            ],
            [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="coord_tasks")]
        ]

        await update.message.reply_text(
            f"–ó–∞–¥–∞—á–∞: {title}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return "AWAIT_TASK_PRIORITY"

    async def handle_task_assignment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        task_data = context.user_data.get('temp_task_data', {})
        
        try:
            task_id = await self.coordination_manager.create_task(
                task_data['operation_id'],
                {
                    'group_id': task_data['group_id'],
                    'creator_id': update.effective_user.id,
                    'title': task_data['title'],
                    'description': task_data['description'],
                    'priority_level': task_data.get('priority', 2),
                    'deadline': task_data.get('deadline')
                }
            )
            
            await query.edit_message_text(
                "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≥—Ä—É–ø–ø–µ.",
                reply_markup=self._get_task_management_keyboard(task_id)
            )
        except Exception as e:
            logger.error(f"Error in task assignment: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

    async def handle_status_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        query = update.callback_query
        data = query.data.split('_')
        task_id = int(data[2])
        new_status = data[3]
        
        success = await self.coordination_manager.update_task_progress(
            task_id,
            {
                'reporter_id': update.effective_user.id,
                'status_update': new_status,
                'progress_percentage': 100 if new_status == 'completed' else 50
            }
        )
        
        if success:
            await query.edit_message_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_status}",
                reply_markup=self._get_task_management_keyboard(task_id)
            )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

    async def handle_escalation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        task_id = int(query.data.split('_')[2])
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        await self.coordination_manager.escalate_task(task_id)
        await self.notification_manager.notify_coordinators(
            f"‚ö†Ô∏è –≠—Å–∫–∞–ª–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ #{task_id}!\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!"
        )
        
        await query.edit_message_text(
            "üîî –ó–∞–¥–∞—á–∞ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º",
            reply_markup=self._get_task_management_keyboard(task_id)
        )

    def _get_task_management_keyboard(self, task_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π"""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"task_status_{task_id}_completed"),
                InlineKeyboardButton("üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"task_status_{task_id}_in_progress")
            ],
            [
                InlineKeyboardButton("‚ö†Ô∏è –≠—Å–∫–∞–ª–∞—Ü–∏—è", callback_data=f"task_escalate_{task_id}"),
                InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f"task_details_{task_id}")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coordination_menu")]
        ])
