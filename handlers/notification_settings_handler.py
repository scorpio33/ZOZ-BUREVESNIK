from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

class NotificationSettingsHandler:
    def __init__(self, settings_manager, monitoring):
        self.settings_manager = settings_manager
        self.monitoring = monitoring

    async def show_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üì± –ö–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="notif_channels")],
            [InlineKeyboardButton("üîï –†–µ–∂–∏–º ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª", callback_data="notif_dnd")],
            [InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="notif_filters")],
            [InlineKeyboardButton("‚è± –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", callback_data="notif_intervals")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="notif_stats")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_dnd_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª"""
        query = update.callback_query
        user_id = query.from_user.id
        
        settings = await self.settings_manager.get_user_settings(user_id)
        dnd = settings['do_not_disturb']
        
        keyboard = [
            [InlineKeyboardButton(
                "üîï –í—ã–∫–ª—é—á–∏—Ç—å" if dnd['enabled'] else "üîî –í–∫–ª—é—á–∏—Ç—å",
                callback_data="notif_dnd_toggle"
            )],
            [
                InlineKeyboardButton("üåô –ù–∞—á–∞–ª–æ", callback_data="notif_dnd_start"),
                InlineKeyboardButton("üåÖ –ö–æ–Ω–µ—Ü", callback_data="notif_dnd_end")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="notif_settings")]
        ]
        
        status = "–í–∫–ª—é—á–µ–Ω" if dnd['enabled'] else "–í—ã–∫–ª—é—á–µ–Ω"
        await query.message.edit_text(
            f"üîï –†–µ–∂–∏–º ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è: {dnd['start_time']} - {dnd['end_time']}\n\n"
            f"–í —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        query = update.callback_query
        user_id = query.from_user.id
        
        stats = await self.monitoring.get_delivery_stats('week')
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for type_name, type_stats in stats.items():
            text += f"{type_name}:\n"
            text += f"‚úì –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {type_stats['delivered']}\n"
            text += f"‚úó –û—à–∏–±–æ–∫: {type_stats['failed']}\n"
            if type_stats['avg_read_time']:
                avg_time = round(type_stats['avg_read_time'] / 60, 1)
                text += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è: {avg_time} –º–∏–Ω\n"
            text += "\n"
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="notif_settings")]]
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )