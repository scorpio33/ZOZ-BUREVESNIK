from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class ResourceHandler:
    def __init__(self, resource_manager, permission_manager):
        self.resource_manager = resource_manager
        self.permission_manager = permission_manager

    async def show_resource_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏"""
        query = update.callback_query
        await query.answer()

        keyboard = [
            [InlineKeyboardButton("üì¶ –í—ã–¥–∞—á–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", callback_data="resource_checkout")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", callback_data="resource_return")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤", callback_data="resource_list")],
            [InlineKeyboardButton("üìä –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="resource_planning")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_menu")]
        ]

        await query.message.edit_text(
            "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def checkout_resource(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        resources = await self.resource_manager.get_available_resources()
        
        keyboard = []
        for resource in resources:
            keyboard.append([
                InlineKeyboardButton(
                    f"{resource['name']} (SN: {resource['serial_number']})",
                    callback_data=f"checkout_{resource['resource_id']}"
                )
            ])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="resource_menu")])

        await query.message.edit_text(
            "üì¶ –í—ã–¥–∞—á–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–¥–∞—á–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def confirm_checkout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()

        resource_id = int(query.data.split('_')[1])
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        group_id = await self.resource_manager.get_user_active_group(user_id)
        if not group_id:
            await query.message.edit_text(
                "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"
            )
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞)
        return_date = datetime.now() + timedelta(hours=24)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–¥–∞—á—É
        success = await self.resource_manager.checkout_resource(
            resource_id, user_id, group_id, 
            context.user_data.get('operation_id'), return_date
        )

        if success:
            await query.message.edit_text(
                "‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ!\n"
                f"–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
            )

    async def return_resource(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_resources = await self.resource_manager.get_user_resources(query.from_user.id)
        
        keyboard = []
        for resource in user_resources:
            keyboard.append([
                InlineKeyboardButton(
                    f"{resource['name']} (–í—ã–¥–∞–Ω–æ: {resource['checkout_date']})",
                    callback_data=f"return_{resource['resource_id']}"
                )
            ])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="resource_menu")])

        await query.message.edit_text(
            "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def confirm_return(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()

        resource_id = int(query.data.split('_')[1])
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –•–æ—Ä–æ—à–µ–µ", callback_data=f"condition_{resource_id}_good")],
            [InlineKeyboardButton("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è", callback_data=f"condition_{resource_id}_fair")],
            [InlineKeyboardButton("‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–æ", callback_data=f"condition_{resource_id}_damaged")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="resource_return")]
        ]

        await query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )