from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

class TrainingHandler:
    def __init__(self, training_manager):
        self.training_manager = training_manager

    async def show_training_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress = await self.training_manager.get_course_progress(user_id)
        
        text = (
            "üìö –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è\n\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {progress['completed_courses']}/{progress['total_courses']}\n"
            f"üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {progress['avg_score']:.1f}%\n"
            f"üèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {progress['total_points']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã", callback_data="training_courses")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="training_progress")],
            [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ —É—á–µ–Ω–∏–∫–æ–≤", callback_data="training_leaderboard")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_available_courses(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self.db.get_user(user_id)
        courses = await self.training_manager.get_available_courses(user_id, user['level'])
        
        if not courses:
            await query.message.edit_text(
                "üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="training_menu")
                ]])
            )
            return

        text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
        keyboard = []
        
        for course in courses:
            status_emoji = {
                'not_started': '‚ö™Ô∏è',
                'in_progress': 'üîµ',
                'completed': '‚úÖ'
            }.get(course['status'], '‚ö™Ô∏è')
            
            text += (f"{status_emoji} {course['title']}\n"
                    f"‚îî –£—Ä–æ–≤–µ–Ω—å: {course['required_level']}, "
                    f"–û—á–∫–∏: {course['points']}\n\n")
            
            keyboard.append([
                InlineKeyboardButton(
                    f"{status_emoji} {course['title']}", 
                    callback_data=f"course_{course['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="training_menu")])
        
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )