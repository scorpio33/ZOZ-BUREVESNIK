from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.base_handler import BaseHandler
import logging

logger = logging.getLogger(__name__)

class StatisticsHandler(BaseHandler):
    def __init__(self, db_manager, stats_manager):
        super().__init__(db_manager)
        self.stats_manager = stats_manager

    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        if update.callback_query:
            return await self.handle_statistics_callback(update, context)
        return False

    async def handle_statistics_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        query = update.callback_query
        data = query.data

        try:
            if data == "statistics":
                return await self.show_statistics_menu(update, context)
            elif data == "personal_stats":
                return await self.show_personal_statistics(update, context)
            elif data == "global_stats":
                return await self.show_global_statistics(update, context)
            else:
                await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return False

    async def show_statistics_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üìä –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="personal_stats")],
            [InlineKeyboardButton("üåç –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="global_stats")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await update.callback_query.message.edit_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "‚Ä¢ –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ø–æ–∏—Å–∫–∞–º",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True

    async def show_personal_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü–æ–∫–∞–∑ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = await self.stats_manager.get_user_statistics(update.effective_user.id)
        
        message = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë§ –£—Ä–æ–≤–µ–Ω—å: {stats.get('level', 1)}\n"
            f"‚≠êÔ∏è –û–ø—ã—Ç: {stats.get('experience', 0)}\n"
            f"üîç –£—á–∞—Å—Ç–∏–µ –≤ –ø–æ–∏—Å–∫–∞—Ö: {stats.get('searches', 0)}\n"
            f"üìç –ü—Ä–æ–π–¥–µ–Ω–æ –∫–º: {stats.get('distance', 0)}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {stats.get('completed_tasks', 0)}"
        )
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="statistics")]]
        
        await update.callback_query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True

    async def show_global_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü–æ–∫–∞–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = await self.stats_manager.get_global_statistics()
        
        message = (
            "üåç –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}\n"
            f"üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {stats.get('total_searches', 0)}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {stats.get('successful_searches', 0)}\n"
            f"üìç –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats.get('total_distance', 0)} –∫–º"
        )
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="statistics")]]
        
        await update.callback_query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
