import logging
import json
import math
from datetime import datetime
import gpxpy
import gpxpy.gpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Location
from telegram.ext import ContextTypes
from core.states import States
from database.db_manager import DatabaseManager
from services.map_service import MapService
from config.api_config import MAP_UPDATE_INTERVAL
from services.gps_handler import GPSHandler
from services.map_cache_service import MapCacheService
from services.track_compression import TrackCompressor
from services.track_export import TrackExporter
from services.track_analyzer import TrackAnalyzer
from core.map_manager import MapManager
from services.yandex_maps_service import YandexMapsService
from utils.location_permission_manager import LocationPermissionManager

logger = logging.getLogger(__name__)

class MapHandler(BaseHandler):
    def __init__(self, db_manager: DatabaseManager):
        super().__init__(db_manager)
        self.gps_handler = GPSHandler()
        self.map_cache = MapCacheService()
        self.track_compressor = TrackCompressor()
        self.track_exporter = TrackExporter()
        self.active_tracks = {}  # user_id: {track_id, points}
        self.map_service = MapService()
        self.location_updates = {}  # user_id: last_update_time
        self.live_tracking_users = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º live-—Ç—Ä–µ–∫–∏–Ω–≥–æ–º
        self.location_permission_manager = LocationPermissionManager(db_manager)

    async def show_map_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–∞—Ä—Ç—ã"""
        keyboard = [
            [InlineKeyboardButton("üìç –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —Ç—Ä–µ–∫–∞", callback_data="start_track")],
            [InlineKeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å —Ç—Ä–µ–∫–∞", callback_data="stop_track")],
            [InlineKeyboardButton("üìä –ú–æ–∏ —Ç—Ä–µ–∫–∏", callback_data="my_tracks")],
            [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="send_location")],
            [InlineKeyboardButton("üó∫ –ö–∞—Ä—Ç–∞ –æ–Ω–ª–∞–π–Ω", callback_data="online_map")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await update.callback_query.message.edit_text(
            "üó∫ –ú–µ–Ω—é –∫–∞—Ä—Ç—ã\n\n"
            "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç—Ä–µ–∫–∏ —Å–≤–æ–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True

    async def handle_map_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∫–∞—Ä—Ç—ã"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id
        
        try:
            if data == "map_main":
                await self.show_map_menu(update, context)
            
            elif data == "start_track":
                if user_id in self.active_tracks:
                    await query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫!")
                    return
                await self.handle_track_start(update, context)
            
            elif data == "stop_track":
                if user_id not in self.active_tracks:
                    await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞!")
                    return
                await self.handle_track_stop(update, context)
            
            elif data == "my_tracks":
                await self.show_tracks_list(update, context)
            
            elif data == "send_location":
                await self.request_location(update, context)
            
            elif data == "online_map":
                await self.show_online_map(update, context)
            
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –¥–ª—è –∫–∞—Ä—Ç—ã: {data}")
                await query.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–∞—Ä—Ç—ã: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await self.show_map_menu(update, context)

    async def handle_track_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–∫–∞"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        if user_id in self.active_tracks:
            await query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
        track_id = await self.db.create_track(user_id)
        self.active_tracks[user_id] = {
            'track_id': track_id,
            'points': []
        }
        
        keyboard = [
            [InlineKeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="stop_track")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")]
        ]
        
        await query.message.edit_text(
            "üìç –ó–∞–ø–∏—Å—å —Ç—Ä–µ–∫–∞ –Ω–∞—á–∞—Ç–∞!\n\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ –í—Å–µ —Ç–æ—á–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã\n"
            "‚Ä¢ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await query.answer("–ó–∞–ø–∏—Å—å —Ç—Ä–µ–∫–∞ –Ω–∞—á–∞—Ç–∞!")

    async def handle_track_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–∫–∞"""
        user_id = update.effective_user.id
        track_data = self.active_tracks.pop(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫ –≤ –±–∞–∑—É
        track_info = {
            'id': track_data['track_id'],
            'user_id': user_id,
            'points': track_data['points'],
            'start_time': track_data['start_time'],
            'end_time': datetime.now()
        }
        
        await self.db.save_track(track_info)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–∫–∞
        stats = self.track_analyzer.analyze_track(track_data['points'])
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫", callback_data=f"show_track_{track_data['track_id']}")],
            [InlineKeyboardButton("¬´ –í –º–µ–Ω—é –∫–∞—Ä—Ç—ã", callback_data="map_main")]
        ]
        
        await update.callback_query.message.edit_text(
            "‚úÖ –ó–∞–ø–∏—Å—å —Ç—Ä–µ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            f"üìè –ü—Ä–æ–π–¥–µ–Ω–æ: {stats['distance']:.2f} –∫–º\n"
            f"‚è± –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: {stats['duration']}\n"
            f"üìà –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {stats['avg_speed']:.1f} –∫–º/—á",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        user_id = update.effective_user.id
        location = update.message.location
        
        if user_id in self.active_tracks:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç—Ä–µ–∫—É
            self.active_tracks[user_id]['points'].append({
                'lat': location.latitude,
                'lon': location.longitude,
                'time': update.message.date
            })
            
            await update.message.reply_text("üìç –¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ç—Ä–µ–∫—É")
            return True
        
        if user_id in self.live_tracking_users:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
            await self.db.update_user_location(user_id, location.latitude, location.longitude)
            await update.message.reply_text("üìç –í–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        
        return False

    async def start_tracking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            group_id = await self.map_manager.db.get_user_active_group(user_id)
            if not group_id:
                await query.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ")
                return
                
            success = await self.map_manager.start_tracking(user_id, group_id)
            if success:
                await query.edit_message_text(
                    "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è",
                    reply_markup=self._get_tracking_keyboard()
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
                
        except Exception as e:
            logger.error(f"Error starting tracking: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
    def _get_tracking_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"""
        keyboard = [
            [
                InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="send_location"),
                InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_tracking")
            ],
            [
                InlineKeyboardButton("üó∫ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –≥—Ä—É–ø–ø—ã", callback_data="show_group_map"),
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    def calculate_distance(self, points):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤"""
        total_distance = 0
        for i in range(len(points) - 1):
            lat1, lon1 = points[i]['lat'], points[i]['lon']
            lat2, lon2 = points[i + 1]['lat'], points[i + 1]['lon']
            
            R = 6371  # —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
            
            # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–¥–∏–∞–Ω—ã
            lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
            
            # –†–∞–∑–Ω–∏—Ü–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            dlat = lat2 - lat1
            dlon = lon2 - lon1
            
            # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤
            a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
            c = 2 * math.asin(math.sqrt(a))
            distance = R * c
            
            total_distance += distance
        
        return total_distance

    def create_gpx(self, points, track_name="Track"):
        """–°–æ–∑–¥–∞–Ω–∏–µ GPX —Ñ–∞–π–ª–∞ –∏–∑ —Ç–æ—á–µ–∫ —Ç—Ä–µ–∫–∞"""
        gpx = gpxpy.gpx.GPX()
        gpx_track = gpxpy.gpx.GPXTrack()
        gpx.tracks.append(gpx_track)
        
        gpx_segment = gpxpy.gpx.GPXTrackSegment()
        gpx_track.segments.append(gpx_segment)
        
        for point in points:
            gpx_segment.points.append(gpxpy.gpx.GPXTrackPoint(
                point['lat'],
                point['lon'],
                time=datetime.fromisoformat(point['timestamp'])
            ))
        
        return gpx.to_xml()

    async def handle_track_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
        user_id = update.effective_user.id
        tracks = self.db.get_user_tracks(user_id)
        
        if not tracks:
            await update.callback_query.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")
                ]])
            )
            return
        
        keyboard = []
        for track in tracks:
            track_date = datetime.fromisoformat(track['start_time']).strftime("%d.%m.%Y %H:%M")
            keyboard.append([
                InlineKeyboardButton(
                    f"üìç {track_date} ({track['distance']:.1f} –∫–º)",
                    callback_data=f"track_view_{track['track_id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")])
        
        await update.callback_query.message.edit_text(
            "üìä –í–∞—à–∏ —Ç—Ä–µ–∫–∏:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_track_view(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ"""
        track_id = int(update.callback_query.data.split('_')[-1])
        track = self.db.get_track(track_id)
        
        if not track:
            await update.callback_query.message.edit_text(
                "‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="track_list")
                ]])
            )
            return
        
        points = json.loads(track['points_json'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å —Ç—Ä–µ–∫–æ–º
        map_file = self.map_service.generate_dynamic_map([], track_points=points)
        
        if map_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            track_info = (
                f"üìç –¢—Ä–µ–∫ #{track_id}\n\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.fromisoformat(track['start_time']).strftime('%d.%m.%Y %H:%M')}\n"
                f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {track['distance']:.1f} –∫–º\n"
                f"üìç –¢–æ—á–µ–∫: {len(points)}"
            )
            
            await update.callback_query.message.edit_text(track_info)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ GPX —Ñ–∞–π–ª
            with open(f"temp/{map_file}", "rb") as f:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=f,
                    filename="track_map.html",
                    caption="üó∫ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–∞"
                )
            
            gpx_data = self.create_gpx(points, f"Track_{track_id}")
            with open(f"track_{track_id}.gpx", "w") as f:
                f.write(gpx_data)
            
            with open(f"track_{track_id}.gpx", "rb") as f:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=f,
                    filename=f"track_{track_id}.gpx",
                    caption="üìé GPX —Ñ–∞–π–ª —Ç—Ä–µ–∫–∞"
                )
        else:
            await update.callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="track_list")
                ]])
            )

    async def show_online_map(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü–æ–∫–∞–∑ –æ–Ω–ª–∞–π–Ω-–∫–∞—Ä—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        user_id = update.effective_user.id
        active_search = await self.db.get_active_search(user_id)
        
        if not active_search:
            await update.callback_query.answer(
                "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ",
                show_alert=True
            )
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await self.db.get_search_participants(active_search['id'])
        map_url = await self.map_cache.get_map_url(participants)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="refresh_map")],
            [InlineKeyboardButton("¬´ –í –º–µ–Ω—é –∫–∞—Ä—Ç—ã", callback_data="map_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "üó∫ –ö–∞—Ä—Ç–∞ –ø–æ–∏—Å–∫–∞\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: {len(participants)}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É: {map_url}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True

    async def _update_locations(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        job = context.job
        chat_id = job.context['chat_id']
        group_id = job.context['group_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        members = self.db.get_group_members_locations(group_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
        map_file = self.map_service.generate_dynamic_map(members)
        
        if map_file:
            with open(f"temp/{map_file}", "rb") as f:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=f,
                    filename="map.html",
                    caption="üó∫ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –≥—Ä—É–ø–ø—ã"
                )

    async def _auto_save_track(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–∂–∞—Ç–∏–µ —Ç—Ä–µ–∫–∞"""
        track_data = self.active_tracks[user_id]
        compressed_points = self.track_compressor.compress_track(track_data['points'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—ã–π —Ç—Ä–µ–∫
        success = self.db.update_track_points(
            track_data['track_id'],
            compressed_points,
            calculate_distance=True
        )
        
        if success:
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Ç–æ—á–µ–∫
            track_data['points'] = []
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –¢—Ä–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω"
            )

    async def show_track_export_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–∫–∞"""
        track_id = context.user_data.get('selected_track_id')
        if not track_id:
            await update.callback_query.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="track_list")
                ]])
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("üìç GPX —Ñ–æ—Ä–º–∞—Ç", callback_data=f"export_gpx_{track_id}")],
            [InlineKeyboardButton("üó∫ KML —Ñ–æ—Ä–º–∞—Ç", callback_data=f"export_kml_{track_id}")],
            [InlineKeyboardButton("üìä JSON —Ñ–æ—Ä–º–∞—Ç", callback_data=f"export_json_{track_id}")],
            [InlineKeyboardButton("üìë CSV —Ñ–æ—Ä–º–∞—Ç", callback_data=f"export_csv_{track_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="track_view")]
        ]
        
        await update.callback_query.message.edit_text(
            "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–∫–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_track_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–∫–∞"""
        query = update.callback_query
        format_type, track_id = query.data.split('_')[1:]
        
        track_data = self.db.get_track(int(track_id))
        if not track_data:
            await query.message.edit_text("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        try:
            # –ö–æ–º–ø—Ä–µ—Å—Å–∏—è —Ç—Ä–µ–∫–∞ –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
            compressed_points = self.track_compressor.compress_track(
                json.loads(track_data['points_json'])
            )
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                'name': f"Track_{track_id}",
                'description': track_data.get('description', ''),
                'points': compressed_points,
                'metadata': track_data.get('metadata', {})
            }
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            exported_data = self.track_exporter.export_track(export_data, format_type)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            filename = f"track_{track_id}.{format_type}"
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=exported_data,
                filename=filename,
                caption=f"üó∫ –¢—Ä–µ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç {format_type.upper()}"
            )
            
        except Exception as e:
            logging.error(f"Export error: {e}")
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç."
            )

    async def _update_gps_status_ui(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  gps_status: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π GPS —Å—Ç–∞—Ç—É—Å–∞"""
        status_messages = {
            'ok': "üìç GPS —Å–∏–≥–Ω–∞–ª —Å—Ç–∞–±–∏–ª—å–Ω—ã–π",
            'signal_loss': "‚ö†Ô∏è –°–ª–∞–±—ã–π GPS —Å–∏–≥–Ω–∞–ª",
            'critical_signal_loss': "‚ùå –ü–æ—Ç–µ—Ä—è GPS —Å–∏–≥–Ω–∞–ª–∞"
        }
        
        keyboard = []
        message = status_messages.get(gps_status['status'], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å GPS")
        
        if gps_status['status'] != 'ok':
            message += f"\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {gps_status['duration']:.0f} —Å–µ–∫. –Ω–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é", 
                                                callback_data="send_last_location")])
        
        keyboard.append([InlineKeyboardButton("¬´ –í –º–µ–Ω—é –∫–∞—Ä—Ç—ã", callback_data="map_menu")])
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def analyze_track(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        track_id = context.user_data.get('selected_track_id')
        if not track_id:
            await update.callback_query.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="track_list")
                ]])
            )
            return
        
        track = self.db.get_track(track_id)
        if not track:
            await update.callback_query.message.edit_text("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        points = json.loads(track['points_json'])
        analyzer = TrackAnalyzer()
        stats = analyzer.analyze_track(points)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        stats_text = (
            f"üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–∞ #{track_id}\n\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {stats['total_distance']} –∫–º\n"
            f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['duration']}\n"
            f"üèÉ‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è –≤ –¥–≤–∏–∂–µ–Ω–∏–∏: {stats['moving_time']}\n"
            f"‚ö°Ô∏è –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {stats['avg_speed']} –∫–º/—á\n"
            f"üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {stats['max_speed']} –∫–º/—á\n"
            f"üìà –ù–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã: {stats['elevation_gain']} –º\n"
            f"üìâ –ü–æ—Ç–µ—Ä—è –≤—ã—Å–æ—Ç—ã: {stats['elevation_loss']} –º\n"
            f"‚è± –¢–µ–º–ø: {stats['pace']} –º–∏–Ω/–∫–º\n\n"
            f"üìç –¢–æ—á–µ–∫: {stats['points_count']}\n"
            f"üïí –ù–∞—á–∞–ª–æ: {datetime.fromisoformat(stats['start_time']).strftime('%H:%M:%S')}\n"
            f"üïí –ö–æ–Ω–µ—Ü: {datetime.fromisoformat(stats['end_time']).strftime('%H:%M:%S')}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"track_segments_{track_id}")],
            [InlineKeyboardButton("üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data=f"track_view_{track_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="track_list")]
        ]
        
        await update.callback_query.message.edit_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_live_tracking_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–µ–Ω–∏–µ live-—Ç—Ä–µ–∫–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        if user_id in self.live_tracking_users:
            await update.callback_query.message.edit_text(
                "‚ùå Live-—Ç—Ä–µ–∫–∏–Ω–≥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")
                ]])
            )
            return
        
        self.live_tracking_users.add(user_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        context.job_queue.run_repeating(
            self.update_live_position,
            interval=30,  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            first=1,
            context=user_id
        )
        
        keyboard = [
            [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥", callback_data="live_tracking_stop")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "‚úÖ Live-—Ç—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
            "–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n"
            "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_search_sectors(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Å–µ–∫—Ç–æ—Ä–∞–º–∏"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º
        user = self.db.get_user(user_id)
        if not user.get('is_coordinator'):
            await query.message.edit_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–µ–∫—Ç–æ—Ä–∞–º–∏ –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")
                ]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_operations = self.db.get_active_operations(coordinator_id=user_id)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ç–æ—Ä", callback_data="sector_create")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤", callback_data="sector_list")],
            [InlineKeyboardButton("üó∫ –ö–∞—Ä—Ç–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤", callback_data="sector_map")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")]
        ]
        
        await query.message.edit_text(
            "üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Å–µ–∫—Ç–æ—Ä–∞–º–∏\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {len(active_operations)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def update_live_position(self, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ live-–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = context.job.context
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é
        position = self.get_last_position(user_id)
        if position:
            self.db.save_live_position(
                user_id=user_id,
                latitude=position['latitude'],
                longitude=position['longitude'],
                altitude=position.get('altitude'),
                accuracy=position.get('accuracy')
            )

    async def handle_offline_maps(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ—Ñ–ª–∞–π–Ω-–∫–∞—Ä—Ç"""
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –æ–±–ª–∞—Å—Ç—å", callback_data="download_area")],
            [InlineKeyboardButton("üì± –û—Ñ–ª–∞–π–Ω-–∫–∞—Ä—Ç—ã", callback_data="show_offline_maps")],
            [InlineKeyboardButton("üó∫ –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã", callback_data="offline_routes")],
            [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="sync_data")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "üó∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω-–∫–∞—Ä—Ç–∞–º–∏\n\n"
            "‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã\n"
            "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_download_area(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã"""
        context.user_data['state'] = 'awaiting_location'
        
        keyboard = [
            [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="send_location")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="offline_maps")]
        ]
        
        await update.callback_query.message.edit_text(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —Ü–µ–Ω—Ç—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å –∏ –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def process_area_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
        if not update.message.location:
            return
        
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['download_center'] = (lat, lon)
        
        keyboard = [
            [
                InlineKeyboardButton("1 –∫–º", callback_data="download_1km"),
                InlineKeyboardButton("3 –∫–º", callback_data="download_3km"),
                InlineKeyboardButton("5 –∫–º", callback_data="download_5km")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="offline_maps")]
        ]
        
        await update.message.reply_text(
            "üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_operation_map(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∫–∞—Ä—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        operation_id = int(query.data.split('_')[-1])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        map_file = await self.map_service.generate_operational_map(operation_id)
        
        if map_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–æ–π
            with open(map_file, "rb") as f:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=f,
                    filename="operation_map.html",
                    caption="üó∫ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"map_refresh_{operation_id}"),
                    InlineKeyboardButton("üìç –ú–æ—è –ø–æ–∑–∏—Ü–∏—è", callback_data="send_location")
                ],
                [
                    InlineKeyboardButton("üéØ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É", callback_data=f"add_point_{operation_id}"),
                    InlineKeyboardButton("‚ö°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å SOS", callback_data=f"send_sos_{operation_id}")
                ],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")]
            ]
            
            await query.message.edit_text(
                "üó∫ –ö–∞—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª —Å–ª–æ–µ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º\n"
                "‚Ä¢ –ö—Ä–∞—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã - –≤–∞–∂–Ω—ã–µ —Ç–æ—á–∫–∏\n"
                "‚Ä¢ –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø\n"
                "‚Ä¢ –¶–≤–µ—Ç–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="map_menu")
                ]])
            )

    async def handle_map_refresh(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
        query = update.callback_query
        operation_id = int(query.data.split('_')[-1])
        
        await query.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã...")
        await self.show_operation_map(update, context)

    async def handle_auto_refresh_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
        query = update.callback_query
        operation_id = context.user_data.get('current_operation_id')
        
        if not operation_id:
            await query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("1 –º–∏–Ω", callback_data=f"map_refresh_60_{operation_id}"),
                InlineKeyboardButton("5 –º–∏–Ω", callback_data=f"map_refresh_300_{operation_id}"),
                InlineKeyboardButton("10 –º–∏–Ω", callback_data=f"map_refresh_600_{operation_id}")
            ],
            [InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"map_refresh_stop_{operation_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_map_settings")]
        ]
        
        await query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_refresh_interval(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        query = update.callback_query
        data = query.data.split('_')
        interval = int(data[2])
        operation_id = int(data[3])
        
        if data[1] == 'stop':
            await self.map_service.stop_auto_refresh(operation_id)
            await query.answer("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
        else:
            await self.map_service.start_auto_refresh(
                operation_id, 
                context, 
                update.effective_chat.id, 
                interval
            )
            await query.answer(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ ({interval} —Å–µ–∫)")
        
        await self.show_map_settings(update, context)

    async def show_map_type_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã"""
        keyboard = [
            [
                InlineKeyboardButton("üó∫ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã", callback_data="map_type_yandex"),
                InlineKeyboardButton("üåç OpenStreetMap", callback_data="map_type_osm")
            ],
            [
                InlineKeyboardButton("üì° –°–ø—É—Ç–Ω–∏–∫", callback_data="map_type_satellite"),
                InlineKeyboardButton("üè∑ –ì–∏–±—Ä–∏–¥", callback_data="map_type_hybrid")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_map_settings")]
        ]
        
        await update.callback_query.message.edit_text(
            "üó∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_map_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ä—Ç—ã"""
        query = update.callback_query
        operation_id = context.user_data.get('current_operation_id')
        
        if not operation_id:
            await query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üìç GPX", callback_data=f"export_gpx_{operation_id}"),
                InlineKeyboardButton("üó∫ KML", callback_data=f"export_kml_{operation_id}")
            ],
            [
                InlineKeyboardButton("üìä JSON", callback_data=f"export_json_{operation_id}"),
                InlineKeyboardButton("üìë CSV", callback_data=f"export_csv_{operation_id}")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="coord_map_settings")]
        ]
        
        await query.message.edit_text(
            "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
