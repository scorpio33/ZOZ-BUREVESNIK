import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.base_handler import BaseHandler
from core.states import States

logger = logging.getLogger(__name__)

class SettingsHandler(BaseHandler):
    def __init__(self, db_manager):
        super().__init__(db_manager)

    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """
        if update.callback_query:
            return await self.handle_settings_callback(update, context)
        return False

    async def handle_settings_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        data = query.data

        try:
            if data == "settings":
                return await self.show_settings_menu(update, context)
            elif data == "profile_settings":
                return await self.show_profile_settings(update, context)
            else:
                await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return False

    async def show_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_settings")],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞", callback_data="change_access")],
            [InlineKeyboardButton("üìã –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞", callback_data="request_coordinator")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ö–≤–µ—Å—Ç—ã", callback_data="quests")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await update.callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞\n"
            "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True

    async def show_profile_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = update.effective_user.id
        user_data = await self.db.get_user_data(user_id)
        
        status = user_data.get('status', '–£—á–∞—Å—Ç–Ω–∏–∫')
        level = user_data.get('level', 1)
        experience = user_data.get('experience', 0)
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")],
            [InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="change_contacts")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üè∑ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"‚ú® –û–ø—ã—Ç: {experience}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True

    async def handle_coordinator_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º
        if await self.db.is_coordinator(user_id):
            await update.callback_query.answer(
                "‚úÖ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º",
                show_alert=True
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
        if await self.db.has_active_coordinator_request(user_id):
            await update.callback_query.answer(
                "‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
                show_alert=True
            )
            return False
        
        keyboard = [
            [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="settings_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "üìã –ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É:\n\n"
            "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        context.user_data['state'] = States.COORDINATOR_REQUEST_NAME
        return True

    async def handle_coordinator_form(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        state = context.user_data.get('state')
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if state == States.COORDINATOR_REQUEST_NAME:
            context.user_data['coord_request'] = {'name': message_text}
            context.user_data['state'] = States.COORDINATOR_REQUEST_LOCATION
            
            await update.message.reply_text(
                "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å –∏ –≥–æ—Ä–æ–¥:"
            )
            return True
            
        elif state == States.COORDINATOR_REQUEST_LOCATION:
            context.user_data['coord_request']['location'] = message_text
            context.user_data['state'] = States.COORDINATOR_REQUEST_PHONE
            
            await update.message.reply_text(
                "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:"
            )
            return True
            
        # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã...
        
        return False

    async def handle_access_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞"""
        keyboard = [
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")]
        ]
        
        await update.callback_query.message.edit_text(
            "üîê –°–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        context.user_data['state'] = States.ENTERING_DEVELOPER_CODE
        return True

    async def handle_quests(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤"""
        user_id = update.effective_user.id
        available_quests = await self.db.get_available_quests(user_id)
        
        if not available_quests:
            await update.callback_query.message.edit_text(
                "üìã –ö–≤–µ—Å—Ç—ã\n\n"
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")
                ]])
            )
            return True

        keyboard = []
        for quest in available_quests:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìú {quest['title']} (+{quest['reward']} –æ–ø—ã—Ç–∞)",
                    callback_data=f"quest_{quest['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings_menu")])
        
        await update.callback_query.message.edit_text(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
